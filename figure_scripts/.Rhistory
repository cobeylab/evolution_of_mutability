CH103_randomized_dataframe <- read.table(paste(results_directory, 'CH103_constant/CH103_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
CH103L_randomized_dataframe <- read.table(paste(results_directory, 'CH103L_constant/CH103L_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26int_randomized_dataframe <- read.table(paste(results_directory, 'VRC26int_constant/VRC26int_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26L_randomized_dataframe <- read.table(paste(results_directory, 'VRC26L_constant/VRC26L_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_01_randomized_dataframe <- read.table(paste(results_directory, 'VRC01_01_logistic/VRC01_01_log_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_13_randomized_dataframe <- read.table(paste(results_directory, 'VRC01_13_logistic/VRC01_13_log_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_19_randomized_dataframe <- read.table(paste(results_directory, 'VRC01_19_logistic/VRC01_19_log_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
randomized_dataframe_list <- list('CH103' = CH103_randomized_dataframe, 'CH103L' = CH103L_randomized_dataframe,
'VRC26int' = VRC26int_randomized_dataframe, 'VRC26L' = VRC26L_randomized_dataframe,
'VRC01_01' = VRC01_01_randomized_dataframe, 'VRC01_13' = VRC01_13_randomized_dataframe,
'VRC01_19' = VRC01_19_randomized_dataframe)
setwd("/Volumes/cobey/mvieira/evolution_of_mutability/figure_scripts")
CH103_observed_dataframe <- read.table(paste(results_directory, 'CH103_constant/CH103_con_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
results_directory <- '../results/relative_mutability/observed_lineages/'
CH103_observed_dataframe <- read.table(paste(results_directory, 'CH103_constant/CH103_con_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
CH103L_observed_dataframe <- read.table(paste(results_directory, 'CH103L_constant/CH103L_con_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26int_observed_dataframe <- read.table(paste(results_directory, 'VRC26int_constant/VRC26int_con_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26L_observed_dataframe <- read.table(paste(results_directory, 'VRC26L_constant/VRC26L_con_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_01_observed_dataframe <- read.table(paste(results_directory, 'VRC01_01_logistic/VRC01_01_log_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_13_observed_dataframe <- read.table(paste(results_directory, 'VRC01_13_logistic/VRC01_13_log_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_19_observed_dataframe <- read.table(paste(results_directory, 'VRC01_19_logistic/VRC01_19_log_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
observed_dataframe_list <- list('CH103' = CH103_observed_dataframe, 'CH103L' = CH103L_observed_dataframe,
'VRC26int' = VRC26int_observed_dataframe, 'VRC26L' = VRC26L_observed_dataframe,
'VRC01_01' = VRC01_01_observed_dataframe, 'VRC01_13' = VRC01_13_observed_dataframe,
'VRC01_19' = VRC01_19_observed_dataframe)
#  ======= GET DATAFRAMES WITH RANDOMIZED MUTABILITY FOR ALL LINEAGES
CH103_randomized_dataframe <- read.table(paste(results_directory, 'CH103_constant/CH103_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
CH103L_randomized_dataframe <- read.table(paste(results_directory, 'CH103L_constant/CH103L_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26int_randomized_dataframe <- read.table(paste(results_directory, 'VRC26int_constant/VRC26int_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26L_randomized_dataframe <- read.table(paste(results_directory, 'VRC26L_constant/VRC26L_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_01_randomized_dataframe <- read.table(paste(results_directory, 'VRC01_01_logistic/VRC01_01_log_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_13_randomized_dataframe <- read.table(paste(results_directory, 'VRC01_13_logistic/VRC01_13_log_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_19_randomized_dataframe <- read.table(paste(results_directory, 'VRC01_19_logistic/VRC01_19_log_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
randomized_dataframe_list <- list('CH103' = CH103_randomized_dataframe, 'CH103L' = CH103L_randomized_dataframe,
'VRC26int' = VRC26int_randomized_dataframe, 'VRC26L' = VRC26L_randomized_dataframe,
'VRC01_01' = VRC01_01_randomized_dataframe, 'VRC01_13' = VRC01_13_randomized_dataframe,
'VRC01_19' = VRC01_19_randomized_dataframe)
source('ggplot_parameters.R')
lineage <- c()
metric_vector <- c()
region_vector <- c()
mutability <- c()
names(randomized_dataframe_list[['CH103']])
lineage <- c()
metric_vector <- c()
region_vector <- c()
mutability <- c()
for(clone in c('CH103','CH103L','VRC26int','VRC26L','VRC01_01','VRC01_13','VRC01_19')){
clone_dataframe <- randomized_dataframe_list[[clone]]
for(metric in c('S5F','HS','OHS','geomS5F')){
for(region in c('WS','FR','CDR')){
lineage <- c(lineage, rep(clone, sum(clone_dataframe$sequence_id == 'Node_0')))
metric_vector <- c(metric_vector, rep(metric, sum(clone_dataframe$sequence_id == 'Node_0')))
region_vector <- c(region_vector, rep(region, sum(clone_dataframe$sequence_id == 'Node_0')))
mutability <- c(mutability,
clone_dataframe[clone_dataframe$sequence_id == 'Node_0',
paste('randomized_',metric,'_',region,'_allsites',sep='')])
}
}
}
lineage <- factor(lineage, levels = c('CH103','CH103L','VRC26int','VRC26L','VRC01_13',
'VRC01_01','VRC01_19'))
metric_vector <- factor(metric_vector, levels = c('S5F','HS','OHS','geomS5F'))
region_vector <- factor(region_vector, levels = c('WS','FR','CDR'))
global_randomized_dataframe <- data.frame(lineage=lineage, metric=metric_vector, region=region_vector, mutability=mutability)
length(lineage)
length(metric_vector)
length(region_vector)
length(mutability)
7*4*3
7*4*3*1000
table(lineage)
table(region_vector)
table(metric_vector)
metric <- 'geomS5F'
lineage
lineage <- 'CH103'
lineage <- c()
metric_vector <- c()
region_vector <- c()
mutability <- c()
for(clone in c('CH103','CH103L','VRC26int','VRC26L','VRC01_01','VRC01_13','VRC01_19')){
clone_dataframe <- randomized_dataframe_list[[clone]]
for(metric in c('S5F','HS','OHS','geomS5F')){
for(region in c('WS','FR','CDR')){
lineage <- c(lineage, rep(clone, sum(clone_dataframe$sequence_id == 'Node_0')))
metric_vector <- c(metric_vector, rep(metric, sum(clone_dataframe$sequence_id == 'Node_0')))
region_vector <- c(region_vector, rep(region, sum(clone_dataframe$sequence_id == 'Node_0')))
mutability <- c(mutability,
clone_dataframe[clone_dataframe$sequence_id == 'Node_0',
paste('randomized_',metric,'_',region,'_allsites',sep='')])
print(length(mutability))
}
}
}
lineage <- c()
metric_vector <- c()
region_vector <- c()
mutability <- c()
for(clone in c('CH103','CH103L','VRC26int','VRC26L','VRC01_01','VRC01_13','VRC01_19')){
clone_dataframe <- randomized_dataframe_list[[clone]]
print(clone)
for(metric in c('S5F','HS','OHS','geomS5F')){
for(region in c('WS','FR','CDR')){
lineage <- c(lineage, rep(clone, sum(clone_dataframe$sequence_id == 'Node_0')))
metric_vector <- c(metric_vector, rep(metric, sum(clone_dataframe$sequence_id == 'Node_0')))
region_vector <- c(region_vector, rep(region, sum(clone_dataframe$sequence_id == 'Node_0')))
mutability <- c(mutability,
clone_dataframe[clone_dataframe$sequence_id == 'Node_0',
paste('randomized_',metric,'_',region,'_allsites',sep='')])
print(length(mutability))
}
}
}
clone <- 'VRC01_19'
metric <- 'geomS5F'
region <- 'WS'
clone_dataframe <- randomized_dataframe_list[[clone]]
print(clone)
clone_dataframe[clone_dataframe$sequence_id == 'Node_0',
paste('randomized_',metric,'_',region,'_allsites',sep='')]
rm(list=ls(all=T))
library('ggplot2')
# Load ggplot parameters
source('ggplot_parameters.R')
points_file_path <- '../results/mutability_vs_time/observed_lineages/CH103_constant/CH103_con_run1a_mutability_vs_time_points.csv'
regressions_file_path <- '../results/mutability_vs_time/observed_lineages/CH103_constant/CH103_con_run1a_mutability_vs_time_correlations.csv'
points_dataframe <- read.table(points_file_path, header = T, sep = ',')
sample_size <- 100
tree_sample <- sample(unique(points_dataframe$tree), sample_size, replace = F)
regressions_dataframe <- read.table(regressions_file_path, header = T, sep = ',')
mean_intercept <- mean(regressions_dataframe[, 'intercept_geomS5F_WS_vs_node_time'])
mean_slope <- mean(regressions_dataframe[, 'slope_geomS5F_WS_vs_node_time'])
mean_intercept <- mean(regressions_dataframe[, 'intercept_geomS5F_WS_vs_node_time'])
mean_slope <- mean(regressions_dataframe[, 'slope_geomS5F_WS_vs_node_time'])
pl <- ggplot(points_dataframe, aes(x = node_time, y = geomS5F_WS)) +
xlab("Time since unmutated ancestor (weeks)") +
ylab("Geometric mean of S5F mutability") +
ggplot_theme
for(tree in tree_sample){
dataframe_subset <- points_dataframe[points_dataframe$tree == tree,]
x <- dataframe_subset[,'node_time']
y <- dataframe_subset[,'geomS5F_WS']
factor <- factor(dataframe_subset[,'node_is_tip'])
pl <- pl + geom_point(data=data.frame(x,y,factor),
aes(x=x,y=y, colour = factor), size = 0.4,
alpha = 0.8)
}
pl <- pl + scale_colour_manual(values=c("grey25",'royalblue1'))
# Add "mean line" (line with mean slope and mean intercept)
pl <- pl + geom_abline(slope=mean_slope,
intercept=mean_intercept,
colour = 'red', linetype = 1, size = 0.5)
png('CH103_overview_geomS5F_vs_time.png', width = 3.43, height = 3, units = 'in', res = 400)
plot(pl)
dev.off()
pdf('CH103_overview_geomS5F_vs_time.pdf', width = 3.43, height = 3)
plot(pl)
dev.off()
library('ggplot2')
library('coda')
library('grid')
# Load ggplot parameters
source('ggplot_parameters.R')
contrasts_file_path <- '../results/contrasts/observed_lineages/CH103_constant/CH103_con_run1a_mutability_contrasts.csv'
# ====== READ DATAFRAMES WITH MUTABILITY CONTRASTS FOR CH103 HEAVY CHAIN =====
contrasts_dataframe <- read.table(contrasts_file_path, header = T, sep = ',')
rm(list=ls(all=T))
library('ggplot2')
library('coda')
library('grid')
# Load ggplot parameters
source('ggplot_parameters.R')
contrasts_file_path <- '../results/contrasts/observed_lineages/CH103_constant/CH103_con_run1a_mutability_contrasts.csv'
# ====== READ DATAFRAMES WITH MUTABILITY CONTRASTS FOR CH103 HEAVY CHAIN =====
contrasts_dataframe <- read.table(contrasts_file_path, header = T, sep = ',')
sample_size <- 100
tree_sample <- sample(unique(contrasts_dataframe$tree), sample_size, replace = F)
pl <- ggplot(contrasts_dataframe, aes(x = geomS5F_WS_contrast)) +
xlab('Change in mean log-S5F mutability') +
ylab('Density') +
ggplot_theme +
scale_y_continuous(expand = c(0,0), limits = c(0,80))
for(tree in tree_sample){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'geomS5F_WS_contrast']
temp_dataframe <- data.frame(x)
#pl <- pl + geom_histogram(data=temp_dataframe,aes(x=x), fill = 'white',
#colour = 'black',alpha = 0.3)
pl <- pl + geom_density(data=temp_dataframe,aes(x=x), fill = 'white',
colour = 'black',alpha = 0.1, size = 0.1)
}
pl <- pl + geom_vline(xintercept = 0, linetype = 2, size = 0.2)
# plot means on top of histograms as vertical red lines
# Get distribuiton of the fraction of negative changes
fraction_negative <- c()
contrast_means <- c()
for(tree in unique(contrasts_dataframe$tree)[1:1000]){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'logS5F_WS_contrast']
contrast_means <- c(contrast_means, mean(x))
if(tree %in% tree_sample){
mean_value <- mean(x)
pl <- pl + geom_vline(xintercept = mean_value, colour = 'red',
alpha = 0.3, size = 0.1)
}
# Get overall fraction of negative changes (disregarding 0s)
if(length(x[x!=0]) > 0){
fraction_negative <- c(fraction_negative,sum(x[x!=0]<0)/length(x[x!=0]))
}else{
fraction_negative <- c(fraction_negative, NA)
}
}
# Get average mean contrast (and HPD)
means_dat <- data.frame(contrast_means)
means_HPD_limits <- HPDinterval(as.mcmc(means_dat$contrast_means), 0.95)
means_llim <- means_HPD_limits[1]
means_ulim <- means_HPD_limits[2]
temp_dataframe <- data.frame(fraction_negative)
fraction_HPD_limits <- HPDinterval(as.mcmc(temp_dataframe[, 1]), 0.95)
fraction_llim <- fraction_HPD_limits[1]
fraction_ulim <- fraction_HPD_limits[2]
# Add inset plot showing distribuiton of changes that are negative (disregarding 0s):
dat <- with(density(temp_dataframe$fraction_negative,na.rm=T), data.frame(x, y))
subpl <- ggplot(data=dat, aes(x = x)) + theme_classic() + xlab('Fraction of mutability losses')
limit_factor <- max(abs(0.5 - max(dat$x)),
abs(0.5 - min(dat$x)))
subpl <- subpl +
geom_area(data = dat, mapping = aes(x = ifelse(x>fraction_llim & x< fraction_ulim , x, 0),y), fill = "grey",alpha = 0.5) +
geom_line(data = dat, mapping = aes(x = x, y = y),size=0.3) +
scale_y_continuous(expand = c(0,0.01), limits = c(0,1.1*max(dat$y))) +
geom_vline(xintercept=mean(fraction_negative,na.rm=T), size = 0.3,colour='red') +
xlim(c(0.3,0.7)) +
geom_vline(xintercept = 0.5, linetype=2, size = 0.3) +
ylab('Density') +
theme(axis.text=element_text(size=x_axis_text_size_subplot),
axis.title=element_text(size=axis_title_size_subplot, margin = margin(0,0,0,0)),
axis.line.x = element_line(colour="black", size = 0.3),
axis.line.y = element_line(colour="black",  size = 0.3),
plot.title = element_text(size=2)
)
# Plotting...
vp <- viewport(width = 0.38, height = 0.38, x = 0.185,
y = unit(8.5, "lines"), just = c("left",
"bottom"))
pdf('CH103_overview_logS5F_contrasts.pdf', width=3.43, height = 3)
plot(pl)
plot(subpl, vp = vp)
dev.off()
sample_size <- 100
tree_sample <- sample(unique(contrasts_dataframe$tree), sample_size, replace = F)
pl <- ggplot(contrasts_dataframe, aes(x = logS5F_WS_contrast)) +
xlab('Change in mean log-S5F mutability') +
ylab('Density') +
ggplot_theme +
scale_y_continuous(expand = c(0,0), limits = c(0,80))
for(tree in tree_sample){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'geomS5F_WS_contrast']
temp_dataframe <- data.frame(x)
#pl <- pl + geom_histogram(data=temp_dataframe,aes(x=x), fill = 'white',
#colour = 'black',alpha = 0.3)
pl <- pl + geom_density(data=temp_dataframe,aes(x=x), fill = 'white',
colour = 'black',alpha = 0.1, size = 0.1)
}
pl <- pl + geom_vline(xintercept = 0, linetype = 2, size = 0.2)
# plot means on top of histograms as vertical red lines
# Get distribuiton of the fraction of negative changes
fraction_negative <- c()
contrast_means <- c()
for(tree in unique(contrasts_dataframe$tree)[1:1000]){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'logS5F_WS_contrast']
contrast_means <- c(contrast_means, mean(x))
if(tree %in% tree_sample){
mean_value <- mean(x)
pl <- pl + geom_vline(xintercept = mean_value, colour = 'red',
alpha = 0.3, size = 0.1)
}
# Get overall fraction of negative changes (disregarding 0s)
if(length(x[x!=0]) > 0){
fraction_negative <- c(fraction_negative,sum(x[x!=0]<0)/length(x[x!=0]))
}else{
fraction_negative <- c(fraction_negative, NA)
}
}
# Get average mean contrast (and HPD)
means_dat <- data.frame(contrast_means)
means_HPD_limits <- HPDinterval(as.mcmc(means_dat$contrast_means), 0.95)
means_llim <- means_HPD_limits[1]
means_ulim <- means_HPD_limits[2]
temp_dataframe <- data.frame(fraction_negative)
fraction_HPD_limits <- HPDinterval(as.mcmc(temp_dataframe[, 1]), 0.95)
fraction_llim <- fraction_HPD_limits[1]
fraction_ulim <- fraction_HPD_limits[2]
# Add inset plot showing distribuiton of changes that are negative (disregarding 0s):
dat <- with(density(temp_dataframe$fraction_negative,na.rm=T), data.frame(x, y))
subpl <- ggplot(data=dat, aes(x = x)) + theme_classic() + xlab('Fraction of mutability losses')
limit_factor <- max(abs(0.5 - max(dat$x)),
abs(0.5 - min(dat$x)))
subpl <- subpl +
geom_area(data = dat, mapping = aes(x = ifelse(x>fraction_llim & x< fraction_ulim , x, 0),y), fill = "grey",alpha = 0.5) +
geom_line(data = dat, mapping = aes(x = x, y = y),size=0.3) +
scale_y_continuous(expand = c(0,0.01), limits = c(0,1.1*max(dat$y))) +
geom_vline(xintercept=mean(fraction_negative,na.rm=T), size = 0.3,colour='red') +
xlim(c(0.3,0.7)) +
geom_vline(xintercept = 0.5, linetype=2, size = 0.3) +
ylab('Density') +
theme(axis.text=element_text(size=x_axis_text_size_subplot),
axis.title=element_text(size=axis_title_size_subplot, margin = margin(0,0,0,0)),
axis.line.x = element_line(colour="black", size = 0.3),
axis.line.y = element_line(colour="black",  size = 0.3),
plot.title = element_text(size=2)
)
# Plotting...
vp <- viewport(width = 0.38, height = 0.38, x = 0.185,
y = unit(8.5, "lines"), just = c("left",
"bottom"))
pdf('CH103_overview_logS5F_contrasts.pdf', width=3.43, height = 3)
plot(pl)
plot(subpl, vp = vp)
dev.off()
pl <- ggplot(contrasts_dataframe, aes(x = logS5F_WS_contrast)) +
xlab('Change in mean log-S5F mutability') +
ylab('Density') +
ggplot_theme +
scale_y_continuous(expand = c(0,0), limits = c(0,80))
pl
sample_size <- 100
tree_sample <- sample(unique(contrasts_dataframe$tree), sample_size, replace = F)
pl <- ggplot(contrasts_dataframe, aes(x = log_S5F_WS_contrast)) +
xlab('Change in mean log-S5F mutability') +
ylab('Density') +
ggplot_theme +
scale_y_continuous(expand = c(0,0), limits = c(0,80))
for(tree in tree_sample){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'log_S5F_WS_contrast']
temp_dataframe <- data.frame(x)
#pl <- pl + geom_histogram(data=temp_dataframe,aes(x=x), fill = 'white',
#colour = 'black',alpha = 0.3)
pl <- pl + geom_density(data=temp_dataframe,aes(x=x), fill = 'white',
colour = 'black',alpha = 0.1, size = 0.1)
}
pl <- pl + geom_vline(xintercept = 0, linetype = 2, size = 0.2)
# plot means on top of histograms as vertical red lines
# Get distribuiton of the fraction of negative changes
fraction_negative <- c()
contrast_means <- c()
for(tree in unique(contrasts_dataframe$tree)[1:1000]){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'logS5F_WS_contrast']
contrast_means <- c(contrast_means, mean(x))
if(tree %in% tree_sample){
mean_value <- mean(x)
pl <- pl + geom_vline(xintercept = mean_value, colour = 'red',
alpha = 0.3, size = 0.1)
}
# Get overall fraction of negative changes (disregarding 0s)
if(length(x[x!=0]) > 0){
fraction_negative <- c(fraction_negative,sum(x[x!=0]<0)/length(x[x!=0]))
}else{
fraction_negative <- c(fraction_negative, NA)
}
}
# Get average mean contrast (and HPD)
means_dat <- data.frame(contrast_means)
means_HPD_limits <- HPDinterval(as.mcmc(means_dat$contrast_means), 0.95)
means_llim <- means_HPD_limits[1]
means_ulim <- means_HPD_limits[2]
temp_dataframe <- data.frame(fraction_negative)
fraction_HPD_limits <- HPDinterval(as.mcmc(temp_dataframe[, 1]), 0.95)
fraction_llim <- fraction_HPD_limits[1]
fraction_ulim <- fraction_HPD_limits[2]
# Add inset plot showing distribuiton of changes that are negative (disregarding 0s):
dat <- with(density(temp_dataframe$fraction_negative,na.rm=T), data.frame(x, y))
subpl <- ggplot(data=dat, aes(x = x)) + theme_classic() + xlab('Fraction of mutability losses')
limit_factor <- max(abs(0.5 - max(dat$x)),
abs(0.5 - min(dat$x)))
subpl <- subpl +
geom_area(data = dat, mapping = aes(x = ifelse(x>fraction_llim & x< fraction_ulim , x, 0),y), fill = "grey",alpha = 0.5) +
geom_line(data = dat, mapping = aes(x = x, y = y),size=0.3) +
scale_y_continuous(expand = c(0,0.01), limits = c(0,1.1*max(dat$y))) +
geom_vline(xintercept=mean(fraction_negative,na.rm=T), size = 0.3,colour='red') +
xlim(c(0.3,0.7)) +
geom_vline(xintercept = 0.5, linetype=2, size = 0.3) +
ylab('Density') +
theme(axis.text=element_text(size=x_axis_text_size_subplot),
axis.title=element_text(size=axis_title_size_subplot, margin = margin(0,0,0,0)),
axis.line.x = element_line(colour="black", size = 0.3),
axis.line.y = element_line(colour="black",  size = 0.3),
plot.title = element_text(size=2)
)
# Plotting...
vp <- viewport(width = 0.38, height = 0.38, x = 0.185,
y = unit(8.5, "lines"), just = c("left",
"bottom"))
pdf('CH103_overview_logS5F_contrasts.pdf', width=3.43, height = 3)
plot(pl)
plot(subpl, vp = vp)
dev.off()
subpl
with(density(temp_dataframe$fraction_negative,na.rm=T), data.frame(x, y))
pl
pl <- ggplot(contrasts_dataframe, aes(x = log_S5F_WS_contrast)) +
xlab('Change in mean log-S5F mutability') +
ylab('Density') +
ggplot_theme +
scale_y_continuous(expand = c(0,0), limits = c(0,80))
for(tree in tree_sample){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'log_S5F_WS_contrast']
temp_dataframe <- data.frame(x)
#pl <- pl + geom_histogram(data=temp_dataframe,aes(x=x), fill = 'white',
#colour = 'black',alpha = 0.3)
pl <- pl + geom_density(data=temp_dataframe,aes(x=x), fill = 'white',
colour = 'black',alpha = 0.1, size = 0.1)
}
pl <- pl + geom_vline(xintercept = 0, linetype = 2, size = 0.2)
pl
fraction_negative <- c()
contrast_means <- c()
for(tree in unique(contrasts_dataframe$tree)[1:1000]){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'logS5F_WS_contrast']
contrast_means <- c(contrast_means, mean(x))
if(tree %in% tree_sample){
mean_value <- mean(x)
pl <- pl + geom_vline(xintercept = mean_value, colour = 'red',
alpha = 0.3, size = 0.1)
}
# Get overall fraction of negative changes (disregarding 0s)
if(length(x[x!=0]) > 0){
fraction_negative <- c(fraction_negative,sum(x[x!=0]<0)/length(x[x!=0]))
}else{
fraction_negative <- c(fraction_negative, NA)
}
}
# Sample of 100 trees
sample_size <- 100
tree_sample <- sample(unique(contrasts_dataframe$tree), sample_size, replace = F)
pl <- ggplot(contrasts_dataframe, aes(x = log_S5F_WS_contrast)) +
xlab('Change in mean log-S5F mutability') +
ylab('Density') +
ggplot_theme +
scale_y_continuous(expand = c(0,0), limits = c(0,80))
for(tree in tree_sample){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'log_S5F_WS_contrast']
temp_dataframe <- data.frame(x)
#pl <- pl + geom_histogram(data=temp_dataframe,aes(x=x), fill = 'white',
#colour = 'black',alpha = 0.3)
pl <- pl + geom_density(data=temp_dataframe,aes(x=x), fill = 'white',
colour = 'black',alpha = 0.1, size = 0.1)
}
pl <- pl + geom_vline(xintercept = 0, linetype = 2, size = 0.2)
# plot means on top of histograms as vertical red lines
# Get distribuiton of the fraction of negative changes
fraction_negative <- c()
contrast_means <- c()
for(tree in unique(contrasts_dataframe$tree)[1:1000]){
x <- contrasts_dataframe[contrasts_dataframe$tree == tree,
'log_S5F_WS_contrast']
contrast_means <- c(contrast_means, mean(x))
if(tree %in% tree_sample){
mean_value <- mean(x)
pl <- pl + geom_vline(xintercept = mean_value, colour = 'red',
alpha = 0.3, size = 0.1)
}
# Get overall fraction of negative changes (disregarding 0s)
if(length(x[x!=0]) > 0){
fraction_negative <- c(fraction_negative,sum(x[x!=0]<0)/length(x[x!=0]))
}else{
fraction_negative <- c(fraction_negative, NA)
}
}
# Get average mean contrast (and HPD)
means_dat <- data.frame(contrast_means)
means_HPD_limits <- HPDinterval(as.mcmc(means_dat$contrast_means), 0.95)
means_llim <- means_HPD_limits[1]
means_ulim <- means_HPD_limits[2]
temp_dataframe <- data.frame(fraction_negative)
fraction_HPD_limits <- HPDinterval(as.mcmc(temp_dataframe[, 1]), 0.95)
fraction_llim <- fraction_HPD_limits[1]
fraction_ulim <- fraction_HPD_limits[2]
# Add inset plot showing distribuiton of changes that are negative (disregarding 0s):
dat <- with(density(temp_dataframe$fraction_negative,na.rm=T), data.frame(x, y))
subpl <- ggplot(data=dat, aes(x = x)) + theme_classic() + xlab('Fraction of mutability losses')
limit_factor <- max(abs(0.5 - max(dat$x)),
abs(0.5 - min(dat$x)))
subpl <- subpl +
geom_area(data = dat, mapping = aes(x = ifelse(x>fraction_llim & x< fraction_ulim , x, 0),y), fill = "grey",alpha = 0.5) +
geom_line(data = dat, mapping = aes(x = x, y = y),size=0.3) +
scale_y_continuous(expand = c(0,0.01), limits = c(0,1.1*max(dat$y))) +
geom_vline(xintercept=mean(fraction_negative,na.rm=T), size = 0.3,colour='red') +
xlim(c(0.3,0.7)) +
geom_vline(xintercept = 0.5, linetype=2, size = 0.3) +
ylab('Density') +
theme(axis.text=element_text(size=x_axis_text_size_subplot),
axis.title=element_text(size=axis_title_size_subplot, margin = margin(0,0,0,0)),
axis.line.x = element_line(colour="black", size = 0.3),
axis.line.y = element_line(colour="black",  size = 0.3),
plot.title = element_text(size=2)
)
# Plotting...
vp <- viewport(width = 0.38, height = 0.38, x = 0.185,
y = unit(8.5, "lines"), just = c("left",
"bottom"))
pdf('CH103_overview_logS5F_contrasts.pdf', width=3.43, height = 3)
plot(pl)
plot(subpl, vp = vp)
dev.off()
