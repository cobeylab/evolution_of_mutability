geom_col(aes(fill = substitution_class),
width = 0.7, position=position_stack()) +
ggplot_theme +
facet_grid(~lineage) +
geom_hline(yintercept=0,linetype = 2) +
theme_bw() +
#theme_classic() +
ylab(ylabel) +
xlab('Region') +
theme(legend.position = 'top',
legend.text=element_text(size=14),
axis.text.y = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.title.x = element_text(size = 18),
axis.text.x = element_text(size = 12)
) +
#scale_y_continuous(limits = c(-10,2)) +
scale_fill_manual(values = c('gray80','gray40'),
labels = c('Synonymous  ','Non-synonynous' )) +
scale_x_discrete(labels = c('CH103' = 'CH103 (H)', 'CH103L' = 'CH103 (L)',
'VRC26' = 'VRC26 (H)', 'VRC26L' = 'VRC26 (L)',
'VRC01_13' = 'VRC01-13 (H)','VRC01_01' = 'VRC01-01 (H)',
'VRC01_19' = 'VRC01-19 (H)')
) +
guides(fill=guide_legend(title=NULL))
return(pl)
}
# Cumulative changes inferred for the 5 lineages
total_changes_plot_logS5F <- total_changes_plot('logS5F')
# Importing plot with results for Liao ancestors
source('Liao_ancestors_S_NS_changes.R')
# =======================  BRANCH-LEVEL CHANGES IN MUTABILITY DUE - DATA VS. MODELS  =========================
# Basic plotting function
base_plot <- function(dataframe, substitution_class, region, simulation_type, ylims = c(-0.01,0.01),
legend = TRUE, x_axis = TRUE, bottom_margin = 1){
dataframe <- dataframe[dataframe$substitution_class == substitution_class & dataframe$region == region &
dataframe$metric == 'logS5F',]
ylabel_subst_class <- switch(substitution_class,
syn_only = 'Syn. change in mean\nlog-S5F mutability',
nonsyn_only = 'Non-syn. change in\nmean log-S5F mutability',
total = 'Total change in mean log\nS5F-mutability')
# Generate dataframe to pass to ggplot
ggplot_dataframe <- data.frame(lineage = dataframe$lineage, mean_contrast_true = dataframe$mean_contrast_true,
mean_contrast_simulation_S5F_S5F = dataframe[,paste('mean_contrast_simulation_',simulation_type,'_S5F_S5F', sep = '')],
contrast_simulation_S5F_S5F_llim = dataframe[,paste('contrast_simulation_',simulation_type,'_S5F_S5F_llim', sep = '')],
contrast_simulation_S5F_S5F_ulim = dataframe[,paste('contrast_simulation_',simulation_type,'_S5F_S5F_ulim', sep = '')],
mean_contrast_simulation_uniform_S5F = dataframe[,paste('mean_contrast_simulation_',simulation_type,'_uniform_S5F', sep = '')],
contrast_simulation_uniform_S5F_llim = dataframe[,paste('contrast_simulation_',simulation_type,'_uniform_S5F_llim', sep = '')],
contrast_simulation_uniform_S5F_ulim = dataframe[,paste('contrast_simulation_',simulation_type,'_uniform_S5F_ulim', sep = '')],
mean_contrast_simulation_CP_S5F = dataframe[,paste('mean_contrast_simulation_',simulation_type,'_CP_S5F', sep = '')],
contrast_simulation_CP_S5F_llim = dataframe[,paste('contrast_simulation_',simulation_type,'_CP_S5F_llim', sep = '')],
contrast_simulation_CP_S5F_ulim = dataframe[,paste('contrast_simulation_',simulation_type,'_CP_S5F_ulim', sep = '')]
)
pl <- ggplot(ggplot_dataframe, aes(x = lineage, y = mean_contrast_true)) +
geom_hline(yintercept=0,linetype = 2) +
ggplot_theme +
ylab(paste(ylabel_subst_class, ' (', region,'s)', sep = '')) +
xlab('Lineage') +
theme(legend.position = ifelse(legend == TRUE, 'top','None'),
legend.text=element_text(size=14),
plot.margin = unit(c(0.2,1,bottom_margin,0.2),'cm'),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 14),
axis.text.y = element_text(size = 14)
) +
scale_y_continuous(limits = ylims) +
# Observed
geom_point(aes(y=mean_contrast_true), shape = 21, fill = 'gray80', alpha = 0.8,
size = 3) +
# Simulated under S5F model
geom_linerange(aes(ymin=contrast_simulation_S5F_S5F_llim,
ymax = contrast_simulation_S5F_S5F_ulim), colour = 'red4',
position = position_nudge(x=-0.1,y=0)) +
geom_point(aes(y=mean_contrast_simulation_S5F_S5F), shape = 21, fill = 'firebrick1', alpha = 0.8,
size = 3,position = position_nudge(x=-0.1,y=0)) +
# Simulated under uniform model
geom_linerange(aes(ymin=contrast_simulation_uniform_S5F_llim,
ymax = contrast_simulation_uniform_S5F_ulim), colour = 'blue4',
position = position_nudge(x=0.1,y=0)) +
geom_point(aes(y=mean_contrast_simulation_uniform_S5F), shape = 21, fill = 'royalblue3', alpha = 0.8,
size = 3, position = position_nudge(x=0.1,y=0)) +
# Simulated under codon-position model
geom_linerange(aes(ymin=contrast_simulation_CP_S5F_llim,
ymax = contrast_simulation_CP_S5F_ulim), colour = 'skyblue',
position = position_nudge(x=0.2,y=0)) +
geom_point(aes(y=mean_contrast_simulation_CP_S5F), shape = 21, fill = 'skyblue', alpha = 0.8,
size = 3, position = position_nudge(x=0.2,y=0)) +
scale_x_discrete(labels = c('CH103' = 'CH103\n(H)', 'CH103L' = 'CH103\n(L)',
'VRC26' = 'VRC26\n(H)', 'VRC26L' = 'VRC26\n(L)',
'VRC01_13' = 'VRC01\n-13(H)','VRC01_01' = 'VRC01\n-01(H)',
'VRC01_19' = 'VRC01\n-19(H)'
)) +
# Dummy points (plotted outside of plotting region, only purpose is to quickly produce ggplot legend)
geom_point(data = data.frame(lineage = c('CH103','CH103','CH103','CH103','CH103L','CH103L','CH103L','CH103L'),
change = c(10,10,10,10,10,10,10,10),
type = factor(c('observed','S5F model','uniform model','codon-position model',
'observed','S5F model','uniform model','codon-position model'),
levels = c('observed','S5F model','uniform model','codon-position model'))
),
aes(x = lineage, y = change, fill = type), shape = 21, size = 3
) +
scale_fill_manual(values = c('gray80', 'firebrick1', 'royalblue3','skyblue'),
labels = c('observed','S5F\nmodel','Uniform\nmodel','Codon-position\nmodel')) +
guides(fill=guide_legend(title=NULL))
if(x_axis == FALSE){
pl <- pl + theme(axis.text.x = element_blank(), axis.title.x = element_blank())
}
return(pl)
}
# Changes compared to aa-unconstrained simulations
pl_syn_FR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'syn_only', region = 'FR',
simulation_type = 'unconstrained', ylims = c(-0.015,0.01),
x_axis = FALSE, bottom_margin = 0.05)
pl_nonsyn_FR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'nonsyn_only', region = 'FR',
simulation_type = 'unconstrained', ylims = c(-0.03,0.01))
pl_syn_CDR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'syn_only', region = 'CDR',
simulation_type = 'unconstrained', ylims = c(-0.015,0.01), legend = FALSE)
pl_nonsyn_CDR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'nonsyn_only', region = 'CDR',
simulation_type = 'unconstrained', ylims = c(-0.035,0.01))
#COMBINING PLOTS
# Plot for the main text:
save_plot('S_NS_mutability_changes.pdf',
plot_grid(pl_syn_FR_unconstrained,total_changes_plot_logS5F,pl_syn_CDR_unconstrained, Liao_CDR_logS5F_changes_pl,
ncol = 2, rel_widths = c(0.55,1),
labels = c('a)','b)','','c)'), label_size = 20),
base_height = 10, base_width = 17
)
base_plot <- function(dataframe, substitution_class, region, simulation_type, ylims = c(-0.01,0.01),
legend = TRUE, x_axis = TRUE, bottom_margin = 1){
dataframe <- dataframe[dataframe$substitution_class == substitution_class & dataframe$region == region &
dataframe$metric == 'logS5F',]
ylabel_subst_class <- switch(substitution_class,
syn_only = 'Syn. change in mean\nlog-S5F mutability',
nonsyn_only = 'Non-syn. change in\nmean log-S5F mutability',
total = 'Total change in mean log\nS5F-mutability')
# Generate dataframe to pass to ggplot
ggplot_dataframe <- data.frame(lineage = dataframe$lineage, mean_contrast_true = dataframe$mean_contrast_true,
mean_contrast_simulation_S5F_S5F = dataframe[,paste('mean_contrast_simulation_',simulation_type,'_S5F_S5F', sep = '')],
contrast_simulation_S5F_S5F_llim = dataframe[,paste('contrast_simulation_',simulation_type,'_S5F_S5F_llim', sep = '')],
contrast_simulation_S5F_S5F_ulim = dataframe[,paste('contrast_simulation_',simulation_type,'_S5F_S5F_ulim', sep = '')],
mean_contrast_simulation_uniform_S5F = dataframe[,paste('mean_contrast_simulation_',simulation_type,'_uniform_S5F', sep = '')],
contrast_simulation_uniform_S5F_llim = dataframe[,paste('contrast_simulation_',simulation_type,'_uniform_S5F_llim', sep = '')],
contrast_simulation_uniform_S5F_ulim = dataframe[,paste('contrast_simulation_',simulation_type,'_uniform_S5F_ulim', sep = '')],
mean_contrast_simulation_CP_S5F = dataframe[,paste('mean_contrast_simulation_',simulation_type,'_CP_S5F', sep = '')],
contrast_simulation_CP_S5F_llim = dataframe[,paste('contrast_simulation_',simulation_type,'_CP_S5F_llim', sep = '')],
contrast_simulation_CP_S5F_ulim = dataframe[,paste('contrast_simulation_',simulation_type,'_CP_S5F_ulim', sep = '')]
)
pl <- ggplot(ggplot_dataframe, aes(x = lineage, y = mean_contrast_true)) +
geom_hline(yintercept=0,linetype = 2) +
ggplot_theme +
ylab(paste(ylabel_subst_class, ' (', region,'s)', sep = '')) +
xlab('Lineage') +
theme(legend.position = ifelse(legend == TRUE, 'top','None'),
legend.text=element_text(size=14),
plot.margin = unit(c(0.2,1,bottom_margin,0.2),'cm'),
axis.title.x = element_text(size = 18),
axis.title.y = element_text(size = 14),
axis.text.y = element_text(size = 14),
axis.text.x = element_text(size = 12)
) +
scale_y_continuous(limits = ylims) +
# Observed
geom_point(aes(y=mean_contrast_true), shape = 21, fill = 'gray80', alpha = 0.8,
size = 3) +
# Simulated under S5F model
geom_linerange(aes(ymin=contrast_simulation_S5F_S5F_llim,
ymax = contrast_simulation_S5F_S5F_ulim), colour = 'red4',
position = position_nudge(x=-0.1,y=0)) +
geom_point(aes(y=mean_contrast_simulation_S5F_S5F), shape = 21, fill = 'firebrick1', alpha = 0.8,
size = 3,position = position_nudge(x=-0.1,y=0)) +
# Simulated under uniform model
geom_linerange(aes(ymin=contrast_simulation_uniform_S5F_llim,
ymax = contrast_simulation_uniform_S5F_ulim), colour = 'blue4',
position = position_nudge(x=0.1,y=0)) +
geom_point(aes(y=mean_contrast_simulation_uniform_S5F), shape = 21, fill = 'royalblue3', alpha = 0.8,
size = 3, position = position_nudge(x=0.1,y=0)) +
# Simulated under codon-position model
geom_linerange(aes(ymin=contrast_simulation_CP_S5F_llim,
ymax = contrast_simulation_CP_S5F_ulim), colour = 'skyblue',
position = position_nudge(x=0.2,y=0)) +
geom_point(aes(y=mean_contrast_simulation_CP_S5F), shape = 21, fill = 'skyblue', alpha = 0.8,
size = 3, position = position_nudge(x=0.2,y=0)) +
scale_x_discrete(labels = c('CH103' = 'CH103\n(H)', 'CH103L' = 'CH103\n(L)',
'VRC26' = 'VRC26\n(H)', 'VRC26L' = 'VRC26\n(L)',
'VRC01_13' = 'VRC01\n-13(H)','VRC01_01' = 'VRC01\n-01(H)',
'VRC01_19' = 'VRC01\n-19(H)'
)) +
# Dummy points (plotted outside of plotting region, only purpose is to quickly produce ggplot legend)
geom_point(data = data.frame(lineage = c('CH103','CH103','CH103','CH103','CH103L','CH103L','CH103L','CH103L'),
change = c(10,10,10,10,10,10,10,10),
type = factor(c('observed','S5F model','uniform model','codon-position model',
'observed','S5F model','uniform model','codon-position model'),
levels = c('observed','S5F model','uniform model','codon-position model'))
),
aes(x = lineage, y = change, fill = type), shape = 21, size = 3
) +
scale_fill_manual(values = c('gray80', 'firebrick1', 'royalblue3','skyblue'),
labels = c('observed','S5F\nmodel','Uniform\nmodel','Codon-position\nmodel')) +
guides(fill=guide_legend(title=NULL))
if(x_axis == FALSE){
pl <- pl + theme(axis.text.x = element_blank(), axis.title.x = element_blank())
}
return(pl)
}
# Changes compared to aa-unconstrained simulations
pl_syn_FR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'syn_only', region = 'FR',
simulation_type = 'unconstrained', ylims = c(-0.015,0.01),
x_axis = FALSE, bottom_margin = 0.05)
pl_nonsyn_FR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'nonsyn_only', region = 'FR',
simulation_type = 'unconstrained', ylims = c(-0.03,0.01))
pl_syn_CDR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'syn_only', region = 'CDR',
simulation_type = 'unconstrained', ylims = c(-0.015,0.01), legend = FALSE)
pl_nonsyn_CDR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'nonsyn_only', region = 'CDR',
simulation_type = 'unconstrained', ylims = c(-0.035,0.01))
#COMBINING PLOTS
# Plot for the main text:
save_plot('S_NS_mutability_changes.pdf',
plot_grid(pl_syn_FR_unconstrained,total_changes_plot_logS5F,pl_syn_CDR_unconstrained, Liao_CDR_logS5F_changes_pl,
ncol = 2, rel_widths = c(0.55,1),
labels = c('a)','b)','','c)'), label_size = 20),
base_height = 10, base_width = 17
)
save_plot('S_NS_mutability_changes.pdf',
plot_grid(pl_syn_FR_unconstrained,total_changes_plot_logS5F,pl_syn_CDR_unconstrained, Liao_CDR_logS5F_changes_pl,
ncol = 2, rel_widths = c(0.55,1),
labels = c('a)','b)','','c)'), label_size = 24),
base_height = 10, base_width = 17
)
save_plot('NS_mutability_changes_supp.pdf',
plot_grid(pl_nonsyn_FR_unconstrained,pl_nonsyn_CDR_unconstrained,
nrow = 2,
labels = c('a)','b)', label_size = 12)
),
base_height = 6, base_width = 12
)
save_plot('NS_mutability_changes_supp.pdf',
plot_grid(pl_nonsyn_FR_unconstrained,pl_nonsyn_CDR_unconstrained,
nrow = 2,
labels = c('a)','b)', label_size = 12)
),
base_height = 12, base_width = 6
)
pl_syn_FR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'syn_only', region = 'FR',
simulation_type = 'unconstrained', ylims = c(-0.015,0.01),
x_axis = FALSE, bottom_margin = 0.05)
pl_nonsyn_FR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'nonsyn_only', region = 'FR',
simulation_type = 'unconstrained', ylims = c(-0.03,0.01),
x_axis = FALSE, bottom_margin = 0.05)
pl_syn_CDR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'syn_only', region = 'CDR',
simulation_type = 'unconstrained', ylims = c(-0.015,0.01), legend = FALSE)
pl_nonsyn_CDR_unconstrained <- base_plot(combined_dataframe, substitution_class = 'nonsyn_only', region = 'CDR',
simulation_type = 'unconstrained', ylims = c(-0.035,0.01), legend = FALSE)
save_plot('NS_mutability_changes_supp.pdf',
plot_grid(pl_nonsyn_FR_unconstrained,pl_nonsyn_CDR_unconstrained,
nrow = 2,
labels = c('a)','b)', label_size = 12)
),
base_height = 12, base_width = 6
)
save_plot('NS_mutability_changes_supp.pdf',
plot_grid(pl_nonsyn_FR_unconstrained,pl_nonsyn_CDR_unconstrained,
nrow = 2,
labels = c('a)','b)', label_size = 12)
),
base_height = 10, base_width = 6
)
save_plot('NS_mutability_changes_supp.pdf',
plot_grid(pl_nonsyn_FR_unconstrained,pl_nonsyn_CDR_unconstrained,
nrow = 2
)
save_plot('NS_mutability_changes_supp.pdf',
plot_grid(pl_nonsyn_FR_unconstrained,pl_nonsyn_CDR_unconstrained,
nrow = 2
),
base_height = 10, base_width = 6
)
save_plot('NS_mutability_changes_supp.pdf',
plot_grid(pl_nonsyn_FR_unconstrained,pl_nonsyn_CDR_unconstrained,
nrow = 2
),
base_height = 10, base_width = 6
)
rm(list=ls(all=T))
# Produces figure for the manuscript showing the distribution of the fraction of negative changes in S5F, for all branches (Fig.2) and separately for different branch positions (Fig 5)
# Uses the following MCMC chains: CH103_con_run1a, CH103L_con_run1a, VRC26int_con_run1a, VRC26L_con_run1a, VRC01_01_log_run1a, VRC01_13_log_run1a, VRC01_19_log_run1a,
library('ggplot2')
library('grid')
library('coda')
#library('lattice')
# ================ LOADING GGPLOT2 PARAMETERS ===============
source('ggplot_parameters.R')
results_directory <- '../results/contrasts/observed_lineages/'
# ======= GET DATAFRAMES WITH FRACTION NEGATIVE LOSSES FROM ALL LINEAGES
CH103_dataframe <- read.table(paste(results_directory, 'CH103_constant/CH103_con_run1a_mutability_contrasts.csv', sep = ''), header = T, sep = ',')
CH103L_dataframe <- read.table(paste(results_directory, 'CH103L_constant/CH103L_con_run1a_mutability_contrasts.csv', sep = ''), header = T, sep = ',')
VRC26int_dataframe <- read.table(paste(results_directory, 'VRC26int_constant/VRC26int_con_run1a_mutability_contrasts.csv', sep = ''), header = T, sep = ',')
VRC26L_dataframe <- read.table(paste(results_directory, 'VRC26L_constant/VRC26L_con_run1a_mutability_contrasts.csv', sep = ''), header = T, sep = ',')
# Produces figure for the manuscript showing the mutability of the inferred ancestral sequence for chain "con_run1a" of each lineage, together with the distribution of mutability values we get by randomizing that sequence while keeping the amino acid sequence constant".
library('ggplot2')
library('reshape')
library('gridExtra')
library('grid')
library('coda')
library('lattice')
library('cowplot')
results_directory <- '../results/relative_mutability/observed_lineages/'
# ======= GET DATAFRAMES WITH OBSERVED MUTABILITY FOR ALL LINEAGES
CH103_observed_dataframe <- read.table(paste(results_directory, 'CH103_constant/CH103_con_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
CH103L_observed_dataframe <- read.table(paste(results_directory, 'CH103L_constant/CH103L_con_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26int_observed_dataframe <- read.table(paste(results_directory, 'VRC26int_constant/VRC26int_con_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26L_observed_dataframe <- read.table(paste(results_directory, 'VRC26L_constant/VRC26L_con_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_01_observed_dataframe <- read.table(paste(results_directory, 'VRC01_01_logistic/VRC01_01_log_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_13_observed_dataframe <- read.table(paste(results_directory, 'VRC01_13_logistic/VRC01_13_log_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_19_observed_dataframe <- read.table(paste(results_directory, 'VRC01_19_logistic/VRC01_19_log_run1a_observed_mutability_MCC.csv', sep = ''), header = T, sep = ',')
observed_dataframe_list <- list('CH103' = CH103_observed_dataframe, 'CH103L' = CH103L_observed_dataframe,
'VRC26int' = VRC26int_observed_dataframe, 'VRC26L' = VRC26L_observed_dataframe,
'VRC01_01' = VRC01_01_observed_dataframe, 'VRC01_13' = VRC01_13_observed_dataframe,
'VRC01_19' = VRC01_19_observed_dataframe)
#  ======= GET DATAFRAMES WITH RANDOMIZED MUTABILITY FOR ALL LINEAGES
CH103_randomized_dataframe <- read.table(paste(results_directory, 'CH103_constant/CH103_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
CH103L_randomized_dataframe <- read.table(paste(results_directory, 'CH103L_constant/CH103L_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26int_randomized_dataframe <- read.table(paste(results_directory, 'VRC26int_constant/VRC26int_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC26L_randomized_dataframe <- read.table(paste(results_directory, 'VRC26L_constant/VRC26L_con_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_01_randomized_dataframe <- read.table(paste(results_directory, 'VRC01_01_logistic/VRC01_01_log_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_13_randomized_dataframe <- read.table(paste(results_directory, 'VRC01_13_logistic/VRC01_13_log_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_19_randomized_dataframe <- read.table(paste(results_directory, 'VRC01_19_logistic/VRC01_19_log_run1a_randomized_mutability_MCC.csv', sep = ''), header = T, sep = ',')
randomized_dataframe_list <- list('CH103' = CH103_randomized_dataframe, 'CH103L' = CH103L_randomized_dataframe,
'VRC26int' = VRC26int_randomized_dataframe, 'VRC26L' = VRC26L_randomized_dataframe,
'VRC01_01' = VRC01_01_randomized_dataframe, 'VRC01_13' = VRC01_13_randomized_dataframe,
'VRC01_19' = VRC01_19_randomized_dataframe)
# ================ IMPORTING GGPLOT2 PARAMETERS ===============
source('ggplot_parameters.R')
# ==== MAKE GLOBAL DATAFRAME WITH RANDOMIZED ANCESTRAL VALUES FOR EACH LINEAGE, REPLICATE, REGION AND METRIC (FOR VIOLIN PLOTS)
lineage <- c()
metric_vector <- c()
region_vector <- c()
mutability <- c()
for(clone in c('CH103','CH103L','VRC26int','VRC26L','VRC01_01','VRC01_13','VRC01_19')){
clone_dataframe <- randomized_dataframe_list[[clone]]
print(clone)
for(metric in c('S5F','HS','OHS','geomS5F')){
for(region in c('WS','FR','CDR')){
lineage <- c(lineage, rep(clone, sum(clone_dataframe$sequence_id == 'Node_0')))
metric_vector <- c(metric_vector, rep(metric, sum(clone_dataframe$sequence_id == 'Node_0')))
region_vector <- c(region_vector, rep(region, sum(clone_dataframe$sequence_id == 'Node_0')))
mutability <- c(mutability,
clone_dataframe[clone_dataframe$sequence_id == 'Node_0',
paste('randomized_',metric,'_',region,'_allsites',sep='')])
}
}
}
lineage <- factor(lineage, levels = c('CH103','CH103L','VRC26int','VRC26L','VRC01_13',
'VRC01_01','VRC01_19'))
metric_vector <- factor(metric_vector, levels = c('S5F','HS','OHS','geomS5F'))
region_vector <- factor(region_vector, levels = c('WS','FR','CDR'))
global_randomized_dataframe <- data.frame(lineage=lineage, metric=metric_vector, region=region_vector, mutability=mutability)
# ==== MAKE GLOBAL DATAFRAME WITH OBSERVED VALUE FOR EACH LINEAGE, REPLICATE, REGION AND METRIC (FOR VIOLIN PLOTS)
lineage <- c()
metric_vector <- c()
region_vector <- c()
mutability <- c()
percentile <- c()
for(clone in c('CH103','CH103L','VRC26int','VRC26L','VRC01_01','VRC01_13','VRC01_19')){
clone_dataframe <- observed_dataframe_list[[clone]]
for(metric in c('S5F','HS','OHS','geomS5F')){
for(region in c('WS','FR','CDR')){
lineage <- c(lineage, clone)
metric_vector <- c(metric_vector, metric)
region_vector <- c(region_vector, region)
obs_mutability <-  clone_dataframe[clone_dataframe$sequence_id == 'Node_0',
paste('observed_',metric,'_',region,sep='')]
mutability <- c(mutability, obs_mutability)
randomized_values <- global_randomized_dataframe$mutability[global_randomized_dataframe$lineage == clone &
global_randomized_dataframe$metric == metric &
global_randomized_dataframe$region == region]
percentile <- c(percentile, sum(obs_mutability >= randomized_values)/length(randomized_values))
}
}
}
lineage <- factor(lineage, levels = c('CH103','CH103L','VRC26int','VRC26L','VRC01_13',
'VRC01_01','VRC01_19'))
metric_vector <- factor(metric_vector, levels = c('S5F','HS','OHS','geomS5F'))
region_vector <- factor(region_vector, levels = c('WS','FR','CDR'))
global_observed_dataframe <- data.frame(lineage=lineage, metric=metric_vector, region=region_vector,
mutability=mutability, percentile)
global_observed_dataframe
subset(global_observed_dataframe, metric == 'geomS5F' & region == 'CDR')$mutability
geomS5F_CDR <- subset(global_observed_dataframe, metric == 'geomS5F' & region == 'CDR')$mutability
geomS5F_FR <- subset(global_observed_dataframe, metric == 'geomS5F' & region == 'FR')$mutability
geomS5F_CDR
geomS5F_FR
geomS5F_CDR/geomS5F_FR
geomS5F_CDR/geomS5F_FR -1
mean(geomS5F_CDR/geomS5F_FR -1)
log(geomS5F_CDR) - log(geomS5F_FR)
geomS5F_FR
mean(geomS5F_CDR/geomS5F_FR -1)
min(geomS5F_CDR/geomS5F_FR -1)
max(geomS5F_CDR/geomS5F_FR -1)
global_observed_dataframe
percentiles_CDR <- subset(global_observed_dataframe,  metric == 'geomS5F' & region == 'CDR')$percentile
percentiles_FR <- subset(global_observed_dataframe,  metric == 'geomS5F' & region == 'FR')$percentile
percentiles_CDR
percentiles_FR
min(percentiles_FR)
mean(percentiles_FR)
mean(1 - percentiles_FR)
mean(mean_logS5F_CDR - mean_logS5F_FR)
percentiles_CDR <- subset(global_observed_dataframe,  metric == 'geomS5F' & region == 'CDR')$percentile
subset(global_observed_dataframe,  metric == 'geomS5F' & region == 'CDR'
)
subset(global_observed_dataframe,  metric == 'geomS5F' & region == 'FR')
percentiles_FR
mean(percentiles_FR)
mean(1 - percentiles_FR)
min(1 - percentiles_FR)
mean(percentiles_CDR)
mean(1 - percentiles_CDR)
median(1 - percentiles_CDR)
min(1 - percentiles_CDR)
max(1 - percentiles_CDR)
setwd("/Volumes/cobey/mvieira/evolution_of_mutability/figure_scripts")
library('ggplot2')
library('reshape')
library('gridExtra')
library('grid')
library('coda')
library('scales')
library('cowplot')
source('ggplot_parameters.R')
# Function for making ggplot show axis labels in exponent notation
# From http://stackoverflow.com/questions/10762287/how-can-i-format-axis-labels-with-exponents-with-ggplot2-and-scales
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scientific_format()(x)))
}
# ===== DEFINING BASE PLOTTING FUNCTION FOR RATES VS TIME LINES =====
base_plot_time <- function(results_dataframe, rate){
time_units <- 'generations'
ylabel <- switch(rate,
total_rate = "Total substitution rate",
total_rate_RC = "Total substitution rate (RC)",
S_rate = "Synonymous substitution rate",
N_rate = "Non-synonymous rate")
intercept_column <- which(names(results_dataframe) == paste("intercept_",rate,"_vs_parent_time", sep = ''))
slope_column <- which(names(results_dataframe) == paste("slope_",rate,"_vs_parent_time", sep = ''))
r_column <- which(names(results_dataframe) == paste("r_",rate,"_vs_parent_time", sep = ''))
# Find mean and HPD for slope, intercept and R2
mean_slope <- mean(results_dataframe[, slope_column])
mean_intercept <- mean(results_dataframe[, intercept_column])
mean_r2 <- mean((results_dataframe[, r_column])^2)
slope_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, slope_column]), 0.95)
intercept_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, intercept_column]), 0.95)
r2_HPD_limits <- HPDinterval(as.mcmc((results_dataframe[, r_column])^2), 0.95)
# Plot:
# Subsampling: ggplot can't seem to plot a lot more than 500 lines:
subsample <- sample(1:nrow(results_dataframe), min(500,nrow(results_dataframe)), replace = F)
ymax <- mean(results_dataframe[subsample,paste('max_',rate,sep='')])
if(mean_intercept >= 0){
ymax <- min(c(ymax,1.5*mean_intercept))
}
ymin <- max(mean(results_dataframe[subsample,paste('min_',rate,sep='')]),
min(results_dataframe[subsample, intercept_column]))
if(mean_intercept>=0){
ymin <- max(c(ymin,0.5*mean_intercept))
}
xmax <- mean(results_dataframe[subsample,'max_parent_time'])
xmin <- mean(results_dataframe[subsample,'min_parent_time'])
pl <- ggplot() +
scale_x_continuous(expand = c(0,0), limits = c(xmin,xmax)) +
scale_y_continuous(expand = c(0,0), limits = c(ymin, ymax),label=scientific_10) +
xlab(paste("Time since MRCA (", time_units, ')', sep = '')) +
ylab(ylabel) +
ggplot_theme +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
panel.border = element_blank(),
plot.title = element_text(hjust = 0.5, size = 10),
plot.margin = unit(c(1, 1, 1, 1),"cm"))
for(i in subsample){
slope = results_dataframe[i, slope_column]
intercept <- results_dataframe[i, intercept_column]
pl <- pl + geom_abline(intercept = intercept, slope = slope, alpha = 0.1)
}
pl <- pl +  geom_abline(intercept = mean_intercept, slope = mean_slope,
colour = 'red', size = 2)
pl <- pl + ggtitle(paste('slope = ', signif(mean_slope,2),
" [", signif(slope_HPD_limits[1],3),
', ', signif(slope_HPD_limits[2],3),
']', sep = ''))
#annotate("text", x = 75, y = 0.00175,
#         label = paste('slope = ', signif(mean_slope,2),
#                       " [", signif(slope_HPD_limits[1],3), ' , ', signif(slope_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.0017,
#         label = paste('intercept = ', signif(mean_intercept,2),
#                       " [", signif(intercept_HPD_limits[1],3), ' , ', signif(intercept_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.00165,
#         label = paste('R-squared = ', signif(mean_r2,2),
#                       " [", signif(r2_HPD_limits[1],3), ' , ', signif(r2_HPD_limits[2],3), ']'
#                       , sep = ''))
return(pl)
}
plot_list_total_rate_RC <- c()
plot_list_S_rate <- c()
plot_list_N_rate <- c()
base_plot_time(read.table('../results/rates_vs_time/simulated_alignments/scenario2e_rep1/scenario2e_rep1_rates_vs_time_correlations.scv', header = T, sep =',)
base_plot_time(read.table('../results/rates_vs_time/simulated_alignments/scenario2e_rep1/scenario2e_rep1_rates_vs_time_correlations.scv', header = T, sep ='),'total_rate_RC')
base_plot_time(read.table('../results/rates_vs_time/simulated_alignments/scenario2e_rep1/scenario2e_rep1_rates_vs_time_correlations.csv', header = T, sep ='),'total_rate_RC')
base_plot_time(read.table('../results/rates_vs_time/simulated_alignments/scenario2e_rep1/scenario2e_rep1_rates_vs_time_correlations.csv', header = T, sep =','),'total_rate_RC')
base_plot_time(read.table('../results/rates_vs_time/simulated_alignments/scenario2e_rep1/scenario2e_rep1_rates_vs_time_correlations.csv', header = T, sep =','),'S_rate')
base_plot_time(read.table('../results/rates_vs_time/simulated_alignments/scenario2e_rep1/scenario2e_rep1_rates_vs_time_correlations.csv', header = T, sep =','),'N_rate')
