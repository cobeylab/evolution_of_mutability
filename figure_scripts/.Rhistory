}
# Time units list (for mapply):
time_units_list <- list(CH103 = 'weeks', CH103L = 'weeks', VRC26 = 'weeks', VRC26L = 'weeks',
VRC01_13 ='months', VRC01_19 = 'months', VRC01_01 = 'months')
plot_grid_labels <- c()
for(clone_name in names(points_dataframes_list)){
plot_grid_labels <- c(plot_grid_labels, switch(clone_name,
'CH103' = 'CH103 (H)',
'CH103L' = 'CH103 (L)',
'VRC26' = 'VRC26 (H)',
'VRC26L' = 'VRC26 (L)',
'VRC01_13' = 'VRC01-13 (H)',
'VRC01_01' = 'VRC01-01 (H)',
'VRC01_19' = 'VRC01-19 (H)'
))
}
plot_grid_labels
metric <- 'S5F'
region <- 'WS'
ifelse(metric == 'X7M','7M',metric)
paste(ifelse(metric == 'X7M','7M',metric), '_', region, '_vs_time_all_lineages.png', sep  ='')
plot_grid_labels <- c()
for(clone_name in names(points_dataframes_list)){
plot_grid_labels <- c(plot_grid_labels, switch(clone_name,
'CH103' = 'CH103 (H)',
'CH103L' = 'CH103 (L)',
'VRC26' = 'VRC26 (H)',
'VRC26L' = 'VRC26 (L)',
'VRC01_13' = 'VRC01-13 (H)',
'VRC01_01' = 'VRC01-01 (H)',
'VRC01_19' = 'VRC01-19 (H)'
))
}
plot_grid_labels
for(metric in c('S5F','HS','OHS','CS','X7M')){
for(region in c('WS','FR','CDR')){
plots <- mapply(FUN = base_plot, points_dataframe = points_dataframes_list,
regressions_dataframe = regressions_dataframes_list,
time_units = time_units_list,
MoreArgs = list(metric = metric, region = region, theme_specs = ggplot_theme),
SIMPLIFY = FALSE
)
png(paste(ifelse(metric == 'X7M','7M',metric), '_', region, '_vs_time_all_lineages.png', sep  =''),
height = 3500, width = 3500, res = 300)
plot_grid(plotlist = plots, labels = plot_grid_labels)
dev.off()
}
}
metric
region
slope_values_obs
unique(slope_values_obs)
unique(slope_values_obs)[1]
class(unique(slope_values_obs)[1])
unique(slope_values_obs)[1] == unique(slope_values_obs)[2]
unique(slope_values_obs)[1] == -0.00053834
unique(slope_values_obs)[2] == -0.00053834
setwd("/Volumes/cobey/mvieira/evolution_of_mutability/figure_scripts")
library('ggplot2')
library('coda')
library('cowplot')
# Load ggplot parameters
source('ggplot_parameters.R')
results_directory <- '../results/mutability_vs_time/observed_lineages/'
points_files <- c(CH103 = 'CH103_constant/CH103_con_run1a_mutability_vs_time_points.csv',
CH103L = 'CH103L_constant/CH103L_con_run1a_mutability_vs_time_points.csv',
VRC26 = 'VRC26int_constant/VRC26int_con_run1a_mutability_vs_time_points.csv',
VRC26L = 'VRC26L_constant/VRC26L_con_run1a_mutability_vs_time_points.csv',
VRC01_13 = 'VRC01_13_logistic/VRC01_13_log_run1a_mutability_vs_time_points.csv',
VRC01_01 = 'VRC01_01_logistic/VRC01_01_log_run1a_mutability_vs_time_points.csv',
VRC01_19 = 'VRC01_19_logistic/VRC01_19_log_run1a_mutability_vs_time_points.csv'
)
for(i in 1:length(points_files)){
points_files[i] <- paste(results_directory, points_files[i], sep = '')
}
regressions_files <- gsub('points','correlations', points_files)
points_dataframes_list <- lapply(points_files, FUN = read.csv, header = T)
regressions_dataframes_list <- lapply(regressions_files, FUN = read.csv, header = T)
# Function for generating the plot for each dataset
base_plot <- function(points_dataframe, regressions_dataframe, metric,
region, theme_specs, time_units, tree_sample_size = 100){
ylabel <- switch(metric,
S5F = 'Mean S5F mutability',
X7M = 'Mean 7-mer mutability',
HS = 'Number of hotspots',
CS = 'Number of coldspots',
OHS = 'Number of overlapping hotspots')
ylabel <- paste(ylabel, ' (', region, ')', sep = '')
tree_sample <- sample(unique(points_dataframe$tree), tree_sample_size, replace = F)
# Finding mean slope and mean intercept from the posterior distribution
# (with a little workaround for the naming issue with 7M)
mean_intercept_all <- mean(regressions_dataframe[, paste('intercept_',
ifelse(metric=='X7M',substr(metric,2,3),metric),
'_',region,'_vs_node_time',sep='')])
#Mean intercept for regressions including observed nodes only
mean_intercept_obs <- mean(regressions_dataframe[, paste('intercept_',
ifelse(metric=='X7M',substr(metric,2,3),metric),
'_',region,'_vs_node_time_obs_only',sep='')])
# Slope values for regressions including all nodes
slope_values_all <- regressions_dataframe[, paste('slope_',ifelse(metric=='X7M',substr(metric,2,3),metric)
,'_',region,'_vs_node_time',sep='')]
# Slope values for regressions including observed nodes only
slope_values_obs <- regressions_dataframe[, paste('slope_',ifelse(metric=='X7M',substr(metric,2,3),metric)
,'_',region,'_vs_node_time_obs_only',sep='')]
mean_slope_all <- mean(slope_values_all)
mean_slope_obs <- mean(slope_values_obs)
# Find 95% HPD interval for slope (all nodes only):
slope_all_HPD_limits <- HPDinterval(as.mcmc(slope_values_all),
0.95)
slope_all_llim <- slope_all_HPD_limits[1]
slope_all_ulim <- slope_all_HPD_limits[2]
# Use a solid line for the mean regression line including all nodes
line_type_all <- 1
# Use a dashed line for the regression line including obs nodes only
line_type_obs <- 5
# Maximum time
max_time <-  max(points_dataframe[points_dataframe$tree %in% tree_sample,
'node_time'])
# Plot:
pl <- ggplot() +
xlab(paste("Time at node (",time_units,')',sep='')) +
ylab(ylabel) +
ggplot_theme +
theme(plot.title = element_text(size = 10),
plot.margin = margin(24,12,6,6,'pt')) +
# Internal: black (grey25), Terminal: blue ('royalblue1')
scale_colour_manual(values=c("grey25",'royalblue1'))
for(tree in tree_sample){
dataframe_subset <- points_dataframe[points_dataframe$tree == tree,]
x <- dataframe_subset[,'node_time']
y <- dataframe_subset[,paste(metric,'_',region, sep='')]
factor <- factor(dataframe_subset[,'node_is_tip'])
pl <- pl + geom_point(data=data.frame(x,y,factor),
aes(x=x,y=y, colour = factor), size = 1,
alpha = 0.8)
}
# Add "mean line" (line with mean slope and mean intercept) for regressions including all nodes
pl <- pl + geom_abline(slope=mean_slope_all,
intercept=mean_intercept_all,
colour = 'red', linetype = line_type_all)
# Add mean line for regressions including observed nodes only
pl <- pl + geom_abline(slope=mean_slope_obs,
intercept=mean_intercept_obs,
colour = 'red', linetype = line_type_obs)
# Add mean slope and 95% Cred.I (for regressions involving all points)
pl <- pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'} (',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
# Subplot with posterior distribution of slope
# # Expand axis to fit inset plots
# pl <- pl + scale_x_continuous(limits = c(0, 1.25*max_time))
#
# # Data-frame for shading region under density curve in inset plot
# shading_dataframe <- data.frame(slope_values_all)
# shading_dataframe <- with(density(shading_dataframe$slope_values_all,na.rm=T), data.frame(x, y))
#
# subpl <- ggplot(data.frame(slope=slope_values_all), aes(x=slope)) +
#
#   # Added shaded region under slope posterior density curve
#   geom_area(data = shading_dataframe,
#                     mapping = aes(y = ifelse(x>slope_all_llim & x< slope_all_ulim, y, 0),x),
#                     fill = "snow2") +
#   # Add curve:
#   geom_density() +
#
#   # Add line indicating mean slope for all points:
#   geom_vline(xintercept = mean_slope_all, linetype = line_type_all, colour = 'red') +
#
#   # Add line indicating slope for obs points only:
#   geom_vline(xintercept = mean_slope_obs, linetype = line_type_obs, colour = 'red') +
#
#   theme(axis.text=element_text(size=x_axis_text_size_subplot),
#         axis.title=element_text(size=axis_title_size_subplot, margin = margin(0,0,0,0)),
#         axis.line.x = element_line(colour="black", size = 0.3),
#         axis.line.y = element_line(colour="black",  size = 0.3),
#         plot.title = element_text(size=2)
#   ) +
#   ylab("Density") +
#   xlab("Slope") +
#   #expand_limits(x = 0) +
#   scale_x_continuous(labels = function(x) format(x, scientific=TRUE)) +
#   #scale_x_continuous(limits = c(-0.001,0.001)) +
#   scale_y_continuous(expand = c(0,0)) +
#   geom_vline(xintercept = 0, linetype = 2)
#
#
# return(list('main_plot' = pl, 'subplot' = subpl))
return(pl)
}
# Time units list (for mapply):
time_units_list <- list(CH103 = 'weeks', CH103L = 'weeks', VRC26 = 'weeks', VRC26L = 'weeks',
VRC01_13 ='months', VRC01_19 = 'months', VRC01_01 = 'months')
# Labels for each clone
plot_grid_labels <- c()
for(clone_name in names(points_dataframes_list)){
plot_grid_labels <- c(plot_grid_labels, switch(clone_name,
'CH103' = 'CH103 (H)',
'CH103L' = 'CH103 (L)',
'VRC26' = 'VRC26 (H)',
'VRC26L' = 'VRC26 (L)',
'VRC01_13' = 'VRC01-13 (H)',
'VRC01_01' = 'VRC01-01 (H)',
'VRC01_19' = 'VRC01-19 (H)'
))
}
# For all metrics and regions:
for(metric in c('S5F','HS','OHS','CS','X7M')){
for(region in c('WS','FR','CDR')){
plots <- mapply(FUN = base_plot, points_dataframe = points_dataframes_list,
regressions_dataframe = regressions_dataframes_list,
time_units = time_units_list,
MoreArgs = list(metric = metric, region = region, theme_specs = ggplot_theme),
SIMPLIFY = FALSE
)
png(paste(ifelse(metric == 'X7M','7M',metric), '_', region, '_vs_time_all_lineages.png', sep  =''),
height = 3500, width = 3500, res = 300)
plot(plot_grid(plotlist = plots, labels = plot_grid_labels))
dev.off()
}
}
rm(list=ls(all=T))
setwd("/Volumes/cobey/mvieira/evolution_of_mutability/figure_scripts")
# Produces figure for the manuscript showing the results of the simulations on MCC trees
# Uses the following MCMC chains: CH103_con_run1a, CH103L_con_run1a, VRC26int_con_run1a, VRC26L_con_run1a, VRC01_01_log_run1a, VRC01_13_log_run1a, VRC01_19_log_run1a,
library('ggplot2')
library('cowplot')
#library('reshape')
#library('gridExtra')
library('grid')
#library('coda')
library('lattice')
#library('gridBase')
source('ggplot_parameters.R')
results_directory <- '../results/S_NS_mutability_changes/observed_lineages/'
CH103_dataframe_obs <- read.table(paste(results_directory, 'CH103_constant/CH103_con_run1a_observed_MCC.csv', sep = ''), header = T, sep = ',')
CH103L_dataframe_obs <- read.table(paste(results_directory, 'CH103L_constant/CH103L_con_run1a_observed_MCC.csv', sep = ''), header = T, sep = ',')
VRC26_dataframe_obs <- read.table(paste(results_directory, 'VRC26int_constant/VRC26int_con_run1a_observed_MCC.csv', sep = ''), header = T, sep = ',')
VRC26L_dataframe_obs <- read.table(paste(results_directory, 'VRC26L_constant/VRC26L_con_run1a_observed_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_01_dataframe_obs <- read.table(paste(results_directory, 'VRC01_01_logistic/VRC01_01_log_run1a_observed_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_13_dataframe_obs <- read.table(paste(results_directory, 'VRC01_13_logistic/VRC01_13_log_run1a_observed_MCC.csv', sep = ''), header = T, sep = ',')
VRC01_19_dataframe_obs <- read.table(paste(results_directory, 'VRC01_19_logistic/VRC01_19_log_run1a_observed_MCC.csv', sep = ''), header = T, sep = ',')
# ======= GET DATAFRAMES WITH SIMULATED MCC MUTABILITY RESULTS FOR ALL LINEAGES
CH103_dataframe_sim_constrained <- read.table(paste(results_directory, 'CH103_constant/CH103_con_run1a_simulated_MCC_constrained.csv', sep = ''), header = T, sep = ',')
CH103L_dataframe_sim_constrained <- read.table(paste(results_directory, 'CH103L_constant/CH103L_con_run1a_simulated_MCC_constrained.csv', sep = ''), header = T, sep = ',')
VRC26_dataframe_sim_constrained <- read.table(paste(results_directory, 'VRC26int_constant/VRC26int_con_run1a_simulated_MCC_constrained.csv', sep = ''), header = T, sep = ',')
VRC26L_dataframe_sim_constrained <- read.table(paste(results_directory, 'VRC26L_constant/VRC26L_con_run1a_simulated_MCC_constrained.csv', sep = ''), header = T, sep = ',')
VRC01_01_dataframe_sim_constrained <- read.table(paste(results_directory, 'VRC01_01_logistic/VRC01_01_log_run1a_simulated_MCC_constrained.csv', sep = ''), header = T, sep = ',')
VRC01_13_dataframe_sim_constrained <- read.table(paste(results_directory, 'VRC01_13_logistic/VRC01_13_log_run1a_simulated_MCC_constrained.csv', sep = ''), header = T, sep = ',')
VRC01_19_dataframe_sim_constrained <- read.table(paste(results_directory, 'VRC01_19_logistic/VRC01_19_log_run1a_simulated_MCC_constrained.csv', sep = ''), header = T, sep = ',')
dataframe_list_obs <- list('CH103' = CH103_dataframe_obs, 'CH103L' = CH103L_dataframe_obs,
'VRC26' = VRC26_dataframe_obs, 'VRC26L' = VRC26L_dataframe_obs,
'VRC01_01' = VRC01_01_dataframe_obs, 'VRC01_13' = VRC01_13_dataframe_obs,
'VRC01_19' = VRC01_19_dataframe_obs)
dataframe_list_sim_constrained <- list('CH103' = CH103_dataframe_sim_constrained, 'CH103L' = CH103L_dataframe_sim_constrained,
'VRC26' = VRC26_dataframe_sim_constrained, 'VRC26L' = VRC26L_dataframe_sim_constrained,
'VRC01_01' = VRC01_01_dataframe_sim_constrained, 'VRC01_13' = VRC01_13_dataframe_sim_constrained,
'VRC01_19' = VRC01_19_dataframe_sim_constrained)
# ====== COMBINED DATAFRAME WITH RESULTS FOR ALL LINEAGES =======
lineage_vector <- c()
metric_vector <- c()
substitution_class <- c()
mean_contrast_true <- c()
mean_contrast_simulation_S5F_S5F <- c()
contrast_simulation_S5F_S5F_llim <- c()
contrast_simulation_S5F_S5F_ulim <- c()
mean_correlation_S5F_S5F <- c()
correlation_S5F_S5F_llim <- c()
correlation_S5F_S5F_ulim <- c()
mean_contrast_simulation_uniform_S5F <- c()
contrast_simulation_uniform_S5F_llim <- c()
contrast_simulation_uniform_S5F_ulim <- c()
mean_correlation_uniform_S5F <- c()
correlation_uniform_S5F_llim <- c()
correlation_uniform_S5F_ulim <- c()
mean_contrast_simulation_CP_S5F <- c()
contrast_simulation_CP_S5F_llim <- c()
contrast_simulation_CP_S5F_ulim <- c()
mean_correlation_CP_S5F <- c()
correlation_CP_S5F_llim <- c()
correlation_CP_S5F_ulim <- c()
region <- 'WS'
for(clone in c('CH103','CH103L','VRC26','VRC26L','VRC01_01','VRC01_13','VRC01_19')){
clone_dataframe_obs <- dataframe_list_obs[[clone]]
clone_dataframe_sim <- dataframe_list_sim_constrained[[clone]]
#for(metric in c('S5F','HS','OHS')){
for(metric in c('S5F')){
for(sub_type in c('total','syn_only','nonsyn_only')){
parent_mutability <- clone_dataframe_obs[,paste(metric, '_parent', sep ='')]
child_mutability <- clone_dataframe_obs[,paste(metric, '_child', sep ='')]
contrast_syn <- clone_dataframe_obs$S5F_change_syn
contrast_nonsyn <- clone_dataframe_obs$S5F_change_nonsyn
if(sub_type == 'total'){
contrast_true <- contrast_syn + contrast_nonsyn
}
if(sub_type == 'syn_only'){
contrast_true <- contrast_syn
}
if(sub_type == 'nonsyn_only'){
contrast_true <- contrast_nonsyn
}
mean_contrast_true <- c(mean_contrast_true, mean(contrast_true))
simulated_means_S5F_S5F <- c()
simulated_means_uniform_S5F <- c()
simulated_means_CP_S5F <- c()
spearman_coefficient_S5F_S5F <- c()
spearman_coefficient_uniform_S5F <- c()
spearman_coefficient_CP_S5F <- c()
for(replicate in 1:max(clone_dataframe_sim$replicate)){
if(sub_type == 'total'){
contrasts_S5F_S5F <- clone_dataframe_sim[clone_dataframe_sim$replicate == replicate,
paste(metric,'_',region, '_change_S5FMut_S5FTrans_total', sep ='')]
contrasts_uniform_S5F <- clone_dataframe_sim[clone_dataframe_sim$replicate == replicate,
paste(metric,'_',region, '_change_uniformMut_S5FTrans_total', sep ='')]
contrasts_CP_S5F <- clone_dataframe_sim[clone_dataframe_sim$replicate == replicate,
paste(metric,'_',region, '_change_CPMut_S5FTrans_total', sep ='')]
}
if(sub_type == 'syn_only'){
contrasts_S5F_S5F <- clone_dataframe_sim[clone_dataframe_sim$replicate == replicate,
paste(metric,'_',region, '_change_S5FMut_S5FTrans_syn', sep ='')]
contrasts_uniform_S5F <- clone_dataframe_sim[clone_dataframe_sim$replicate == replicate,
paste(metric,'_',region, '_change_uniformMut_S5FTrans_syn', sep ='')]
contrasts_CP_S5F <- clone_dataframe_sim[clone_dataframe_sim$replicate == replicate,
paste(metric,'_',region, '_change_CPMut_S5FTrans_syn', sep ='')]
}
if(sub_type == 'nonsyn_only'){
contrasts_S5F_S5F <- clone_dataframe_sim[clone_dataframe_sim$replicate == replicate,
paste(metric,'_',region, '_change_S5FMut_S5FTrans_nonsyn', sep ='')]
contrasts_uniform_S5F <- clone_dataframe_sim[clone_dataframe_sim$replicate == replicate,
paste(metric,'_',region, '_change_uniformMut_S5FTrans_nonsyn', sep ='')]
contrasts_CP_S5F <- clone_dataframe_sim[clone_dataframe_sim$replicate == replicate,
paste(metric,'_',region, '_change_CPMut_S5FTrans_nonsyn', sep ='')]
}
simulated_means_S5F_S5F <- c(simulated_means_S5F_S5F, mean(contrasts_S5F_S5F))
simulated_means_uniform_S5F <- c(simulated_means_uniform_S5F, mean(contrasts_uniform_S5F))
simulated_means_CP_S5F <- c(simulated_means_CP_S5F, mean(contrasts_CP_S5F))
spearman_corr_S5F_S5F <- cor.test(contrasts_S5F_S5F,contrast_true,method = 'spearman')$estimate
spearman_corr_uniform_S5F <- cor.test(contrasts_uniform_S5F,contrast_true,method = 'spearman')$estimate
spearman_corr_CP_S5F <- cor.test(contrasts_CP_S5F,contrast_true,method = 'spearman')$estimate
spearman_coefficient_S5F_S5F <- c(spearman_coefficient_S5F_S5F,  spearman_corr_S5F_S5F)
spearman_coefficient_uniform_S5F <- c(spearman_coefficient_uniform_S5F,  spearman_corr_uniform_S5F)
spearman_coefficient_CP_S5F <- c(spearman_coefficient_CP_S5F,  spearman_corr_CP_S5F)
}
##### COMPUTE AVERAGE OF MEAN CONTRASTS AND 95% INTERVAL
mean_contrast_simulation_S5F_S5F <- c(mean_contrast_simulation_S5F_S5F, mean(simulated_means_S5F_S5F))
mean_contrast_simulation_uniform_S5F <- c(mean_contrast_simulation_uniform_S5F, mean(simulated_means_uniform_S5F))
mean_contrast_simulation_CP_S5F <- c(mean_contrast_simulation_CP_S5F, mean(simulated_means_CP_S5F))
# 95% INTERVAL
contrast_simulation_S5F_S5F_llim <- c(contrast_simulation_S5F_S5F_llim, quantile(simulated_means_S5F_S5F,0.025))
contrast_simulation_S5F_S5F_ulim <- c(contrast_simulation_S5F_S5F_ulim,quantile(simulated_means_S5F_S5F,0.975))
contrast_simulation_uniform_S5F_llim <- c(contrast_simulation_uniform_S5F_llim, quantile(simulated_means_uniform_S5F,0.025))
contrast_simulation_uniform_S5F_ulim <- c(contrast_simulation_uniform_S5F_ulim,quantile(simulated_means_uniform_S5F,0.975))
contrast_simulation_CP_S5F_llim <- c(contrast_simulation_CP_S5F_llim, quantile(simulated_means_CP_S5F,0.025))
contrast_simulation_CP_S5F_ulim <- c(contrast_simulation_CP_S5F_ulim,quantile(simulated_means_CP_S5F,0.975))
substitution_class <- c(substitution_class, sub_type)
metric_vector <- c(metric_vector, metric)
lineage_vector <- c(lineage_vector, clone)
##### COMPUTE MEAN CORRELATION WITH TRUE VALUES
mean_correlation_S5F_S5F <- c(mean_correlation_S5F_S5F, mean(spearman_coefficient_S5F_S5F))
mean_correlation_uniform_S5F <- c(mean_correlation_uniform_S5F, mean(spearman_coefficient_uniform_S5F))
mean_correlation_CP_S5F <- c(mean_correlation_CP_S5F, mean(spearman_coefficient_CP_S5F))
correlation_S5F_S5F_llim <- c(correlation_S5F_S5F_llim, quantile(spearman_coefficient_S5F_S5F,0.025))
correlation_uniform_S5F_llim <- c(correlation_uniform_S5F_llim, quantile(spearman_coefficient_uniform_S5F,0.025))
correlation_CP_S5F_llim <- c(correlation_CP_S5F_llim, quantile(spearman_coefficient_CP_S5F,0.025))
correlation_S5F_S5F_ulim <- c(correlation_S5F_S5F_ulim, quantile(spearman_coefficient_S5F_S5F,0.975))
correlation_uniform_S5F_ulim <- c(correlation_uniform_S5F_ulim, quantile(spearman_coefficient_uniform_S5F,0.975))
correlation_CP_S5F_ulim <- c(correlation_CP_S5F_ulim, quantile(spearman_coefficient_CP_S5F,0.975))
}
}
}
lineage_vector <- factor(lineage_vector, levels = c('CH103','CH103L','VRC26','VRC26L','VRC01_13',
'VRC01_01','VRC01_19'))
metric_column <- factor(metric_column, levels = c('S5F','HS','OHS'))
region_column <- factor(region_column, levels = c('WS','FR','CDR'))
combined_dataframe <- data.frame(lineage=lineage_vector, metric = metric_vector, substitution_class, mean_contrast_true,
mean_contrast_simulation_S5F_S5F, contrast_simulation_S5F_S5F_llim, contrast_simulation_S5F_S5F_ulim,
mean_contrast_simulation_uniform_S5F, contrast_simulation_uniform_S5F_llim, contrast_simulation_uniform_S5F_ulim,
mean_contrast_simulation_CP_S5F, contrast_simulation_CP_S5F_llim, contrast_simulation_CP_S5F_ulim,
mean_correlation_S5F_S5F, correlation_S5F_S5F_llim, correlation_S5F_S5F_ulim,
mean_correlation_uniform_S5F, correlation_uniform_S5F_llim, correlation_uniform_S5F_ulim,
mean_correlation_CP_S5F, correlation_CP_S5F_llim, correlation_CP_S5F_ulim)
# DATAFRAME WITH SUMMED CHANGES IN MUTABILITY ACROSS THE TREE
lineage_vector <- c()
region_vector <- c()
cumulative_change <- c()
substitution_class <- c()
group <- c()
for(clone in c('CH103','CH103L','VRC26','VRC26L','VRC01_01','VRC01_13','VRC01_19')){
clone_dataframe_obs <- dataframe_list_obs[[clone]]
for(region in c('WS','FR','CDR')){
region_id <- ifelse(region == 'WS','', paste('_',region,sep=''))
for(class in c('syn_only','nonsyn_only')){
if(class == 'syn_only'){
contrasts <- clone_dataframe_obs[,paste('S5F_change_syn',region_id, sep='')]
}else{
contrasts <- clone_dataframe_obs[,paste('S5F_change_nonsyn',region_id, sep='')]
}
lineage_vector <- c(lineage_vector, clone)
region_vector <- c(region_vector, region)
substitution_class <- c(substitution_class, class)
cumulative_change <- c(cumulative_change, sum(contrasts))
group <- c(group, paste(region, class, sep ='_'))
}
}
}
lineage_vector <- factor(lineage_vector, levels = c('CH103','CH103L','VRC26','VRC26L','VRC01_13',
'VRC01_01','VRC01_19'))
group <- factor(group, levels = c('WS_syn_only','WS_nonsyn_only','FR_syn_only','FR_nonsyn_only',
'CDR_syn_only','CDR_nonsyn_only'))
region_vector <- factor(region_vector, levels = c('WS','FR','CDR'))
substitution_class <- factor(substitution_class, levels = c('syn_only','nonsyn_only'))
total_change_dataframe <- data.frame(lineage=lineage_vector, region = region_vector,
substitution_class,cumulative_change, group)
ggplot(subset(total_change_dataframe, region != 'WS'),
aes(y=cumulative_change,x=region)) +
geom_col(aes(fill = substitution_class),
width = 0.7, position=position_stack()) +
facet_grid(~lineage) +
geom_hline(yintercept=0,linetype = 2) +
theme_bw() +
#theme_classic() +
ylab('Cumulative change in average mutability') +
xlab('Region') +
theme(legend.position = 'top',
legend.text=element_text(size=11)
) +
#scale_y_continuous(limits = c(-10,2)) +
scale_fill_manual(values = c('gray80','gray40'),
labels = c('Synonymous  ','Non-synonynous' )) +
scale_x_discrete(labels = c('CH103' = 'CH103 (H)', 'CH103L' = 'CH103 (L)',
'VRC26' = 'VRC26 (H)', 'VRC26L' = 'VRC26 (L)',
'VRC01_13' = 'VRC01-13 (H)','VRC01_01' = 'VRC01-01 (H)',
'VRC01_19' = 'VRC01-19 (H)')
) +
guides(fill=guide_legend(title=NULL))
syn <- c()
nonsyn <- c()
syn_fraction <- c()
nonsyn_fraction <- c()
total <- c()
for(clone in c('CH103','CH103L','VRC26','VRC26L','VRC01_13','VRC01_01','VRC01_19')){
syn_change <- total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'syn_only',
'cumulative_change']
nonsyn_change <- total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'nonsyn_only',
'cumulative_change']
syn <- c(syn, syn_change)
nonsyn <- c(nonsyn, nonsyn_change)
total_change <- syn_change + nonsyn_change
total <- c(total, total_change)
syn_fraction <- c(syn_fraction, syn_change / total_change)
nonsyn_fraction <- c(nonsyn_fraction, nonsyn_change / total_change)
}
nonsyn_fraction
clone <- 'CH103'
total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'syn_only',
'cumulative_change']
total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'syn_only',]
nonsyn_fraction
syn
syn_change
total_change
total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'syn_only',
]
syn_change <- total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'syn_only',
'cumulative_change']
nonsyn_change <- total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'nonsyn_only',
'cumulative_change']
syn_change
nonsyn_change
total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'syn_only',]
total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'nonsyn_only',]
-1.15 - 1.34
syn_fraction
syn_change <- total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'syn_only',
'cumulative_change']
nonsyn_change <- total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'nonsyn_only',
'cumulative_change']
syn <- c(syn, syn_change)
nonsyn <- c(nonsyn, nonsyn_change)
total_change <- syn_change + nonsyn_change
total <- c(total, total_change)
syn_change
total_change
syn <- c()
nonsyn <- c()
syn_fraction <- c()
nonsyn_fraction <- c()
total <- c()
for(clone in c('CH103','CH103L','VRC26','VRC26L','VRC01_13','VRC01_01','VRC01_19')){
syn_change <- total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'syn_only',
'cumulative_change']
nonsyn_change <- total_change_dataframe[total_change_dataframe$lineage == clone & substitution_class == 'nonsyn_only',
'cumulative_change']
syn <- c(syn, syn_change)
nonsyn <- c(nonsyn, nonsyn_change)
total_change <- syn_change + nonsyn_change
total <- c(total, total_change)
syn_fraction <- c(syn_fraction, syn_change / total_change)
nonsyn_fraction <- c(nonsyn_fraction, nonsyn_change / total_change)
}
syn_fraction
syn_fraction[c(3,6,9,12,15,18,21)]
syn_fraction[c(3,6,9,12,15,18,21)][c(1,2,3,4)]
nonsyn_fraction[c(3,6,9,12,15,18,21)][c(1,2,3,4)]
mean(nonsyn_fraction[c(3,6,9,12,15,18,21)][c(1,2,3,4)])
