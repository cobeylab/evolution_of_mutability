?sapply
?lapply
lapply(unif_samples, FUN = inverseFunction, lambda = 0.5)
sapply(unif_samples, FUN = inverseFunction, lambda = 0.5)
hist(sapply(unif_samples, FUN = inverseFunction, lambda = 0.5))
hist(sapply(unif_samples, FUN = inverseFunction, lambda = 0.5))
lines(x = seq(0,15,0.01), y = 0.5*exp(-0.5*x))
?lines
hist(sapply(unif_samples, FUN = inverseFunction, lambda = 0.5))
lines(x = seq(0,15,0.01), y = 0.5*exp(-0.5*seq(0,15,0.01))
unif_samples <- runif(1000)
hist(sapply(unif_samples, FUN = inverseFunction, lambda = 0.5))
lines(x = seq(0,15,0.01), y = 0.5*exp(-0.5*seq(0,15,0.01)))
lines(x = seq(0,15,0.01), y = 0.5*exp(-0.5*seq(0,15,0.01)))
hist(sapply(unif_samples, FUN = inverseFunction, lambda = 0.5), frequency = F)
lines(x = seq(0,15,0.01), y = 0.5*exp(-0.5*seq(0,15,0.01)))
hist(sapply(unif_samples, FUN = inverseFunction, lambda = 0.5), freq = F)
lines(x = seq(0,15,0.01), y = 0.5*exp(-0.5*seq(0,15,0.01)))
unif_samples <- runif(10000)
hist(sapply(unif_samples, FUN = inverseFunction, lambda = 0.5), freq = F)
lines(x = seq(0,15,0.01), y = 0.5*exp(-0.5*seq(0,15,0.01)))
pexp
rexp
pexp
pexp(inverseFunction(0.5,0.1))
?pexp
hist(sapply(unif_samples, FUN = inverseFunction, lambda = lambda), freq = F)
lines(x = seq(0,15,0.01), y = -lambda*exp(-lambda*seq(0,15,0.01)))
lambda <- 0.5
unif_samples <- runif(10000)
hist(sapply(unif_samples, FUN = inverseFunction, lambda = lambda), freq = F)
lines(x = seq(0,15,0.01), y = -lambda*exp(-lambda*seq(0,15,0.01)))
lambda <- 0.5
unif_samples <- runif(10000)
hist(sapply(unif_samples, FUN = inverseFunction, lambda = lambda), freq = F)
lines(x = seq(0,15,0.01), y = lambda*exp(-lambda*seq(0,15,0.01)))
lambda <- 0.5
unif_samples <- runif(100)
hist(sapply(unif_samples, FUN = inverseFunction, lambda = lambda), freq = F)
lines(x = seq(0,15,0.01), y = lambda*exp(-lambda*seq(0,15,0.01)))
lambda <- 0.5
unif_samples <- runif(10)
hist(sapply(unif_samples, FUN = inverseFunction, lambda = lambda), freq = F)
lines(x = seq(0,15,0.01), y = lambda*exp(-lambda*seq(0,15,0.01)))
unif_samples <- runif(10000)
hist(sapply(unif_samples, FUN = inverseFunction, lambda = lambda), freq = F)
lines(x = seq(0,15,0.01), y = lambda*exp(-lambda*seq(0,15,0.01)))
inverseFunction <- function(x,lambda){
return(-1/lambda * log(1-x))
}
inverseFunction(1,0.1)
inverseFunction(0,0.1)
inverseFunction(0.5,0.1)
pexp(inverseFunction(0.5,0.1), lambda = 0.1)
?pexp
pexp(inverseFunction(0.5,0.1), rate = 0.1)
inverseFunction(0.5,0.1)
pexp(inverseFunction(0.5,0.1), rate = 0.1)
pexp(inverseFunction(0.5,0.1), rate = 0.1) == 0.5
pexp(inverseFunction(0.9,0.1), rate = 0.1) == 0.9
pexp(inverseFunction(0.9,0.2), rate = 0.2) == 0.9
pexp(inverseFunction(0.9,0.2), rate = 0.2) == 0.83
pexp(inverseFunction(0.9,0.2), rate = 0.2) == 0.9
hist(lapply(unif_samples, FUN = inverseFunction, lambda = lambda), freq = F)
x <- c(1,2,3,)
x <- c(1,2,3)
x[-1]
x[-0]
x[length(x)]
sample(c(1,1),1)
sample(c(1,2),1)
sample(c(1,2),1)
sample(c(1,2),1)
?sample
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(_ in n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), prob = event_probs)
n <- c(n, n + increment)
}
plot(times, n)
}
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(_ in n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), prob = event_probs)
n <- c(n, n + increment)
}
plot(times, n)
}
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), prob = event_probs)
n <- c(n, n + increment)
}
plot(times, n)
}
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), prob = event_probs)
n <- c(n, n + increment)
}
x = plot(times, n)
return(x)
}
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), prob = event_probs)
n <- c(n, n + increment)
}
plot(times, n)
#return(x)
}
trajectory(100,1000,10,1)
times
n0 < -10
n0 <- 10
n_events <- 1000
lambda <- 10
mu <- 1
n <- n0
times <- 0
i <- 1
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in 1:length(n_events)){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), prob = event_probs)
n <- c(n, n + increment)
}
plot(times, n)
#return(x)
}
trajectory(100,1000,10,1)
n <- n0
times <- 0
n <- n0
times <- 0
#### Stochastic realizations of the island model
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in 1:n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), prob = event_probs)
n <- c(n, n + increment)
}
plot(times, n)
#return(x)
}
trajectory(100,1000,10,1)
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in 1:n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), prob = event_probs)
n <- c(n, n[length(n)] + increment)
}
plot(times, n)
#return(x)
}
trajectory(100,10,10,1)
n <- n0
times <- 0
i <- 1
event_rate <- lambda + mu*n[length(n)]
event_rate
lambda
mu
n0
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
time_to_next
times <- c(times, time_to_next)
times
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
event_probs
lambda
mu*n[length(n)]
sample(c(1,-1), prob = event_probs)
sample(c(1,-1), prob = event_probs)
increment <- sample(c(1,-1), 1 prob = event_probs)
sample(c(1,-1), 1, prob = event_probs)
sample(c(1,-1), 1, prob = event_probs)
sample(c(1,-1), 1, prob = event_probs)
sample(c(1,-1), 1, prob = event_probs)
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in 1:n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), 1, prob = event_probs)
n <- c(n, n[length(n)] + increment)
}
plot(times, n)
#return(x)
}
trajectory(100,10,10,1)
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in 1:n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), 1, prob = event_probs)
n <- c(n, n[length(n)] + increment)
}
plot(times, n, type = 'l')
#return(x)
}
trajectory(100,10,10,1)
times
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in 1:n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, times[length(times)] + time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), 1, prob = event_probs)
n <- c(n, n[length(n)] + increment)
}
plot(times, n, type = 'l')
#return(x)
}
trajectory(100,10,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,1)
trajectory(100,100,10,0.01)
trajectory(100,100,10,0.01)
trajectory(100,100,10,0.05)
trajectory <- function(n0, n_events, lambda, mu){
n <- n0
times <- 0
for(i in 1:n_events){
event_rate <- lambda + mu*n[length(n)]
# Sample time to next event
time_to_next <- inverseFunction(runif(1), lambda = event_rate)
times <- c(times, times[length(times)] + time_to_next)
event_probs <- c(lambda / event_rate, mu * n[length(n)]/ event_rate)
increment <- sample(c(1,-1), 1, prob = event_probs)
n <- c(n, n[length(n)] + increment)
}
plot(times, n, type = 'l', ylim = c(0,max(n)))
#return(x)
}
trajectory(100,100,10,0.05)
trajectory(100,100,10,1)
trajectory(100,100,10,0.5)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(100,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.1)
trajectory(10,100,10,0.2)
trajectory(10,100,10,0.3)
trajectory(10,100,10,0.4)
trajectory(10,100,10,0.5)
trajectory(10,100,10,0.6)
trajectory(10,100,10,1)
trajectory(10,1000,10,1)
trajectory(10,1000,10,1)
trajectory(10,1000,10,1)
trajectory(10,1000,10,1)
trajectory(10,1000,10,1)
trajectory(10,10000,10,1)
trajectory(10,10000,10,2)
trajectory(10,10000,10,10)
trajectory(10,100,10,10)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
trajectory(10,100,10,100)
setwd("/Volumes/cobey/mvieira/evolution_of_mutability/figure_scripts")
library('ggplot2')
library('cowplot')
library('grid')
library('lattice')
results_dataframe <- read.csv('../results/Liao_ancestors_analysis/Liao_ancestors_S_NS_changes.csv',
header = T)
head(results_dataframe)
source('ggplot_parameters.R')
ggplot(results_dataframe,
aes(x = pair, y = mutability_change)) +
geom_point()
names(results_dataframe)
ggplot(results_dataframe,
aes(x = pair, y = S5F_mutability_change)) +
geom_point()
ggplot(subset(results_dataframe, region != 'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_point()
ggplot(subset(results_dataframe, region != 'WS'),
aes(x = pair, y = S5F_mutability_change)) +
geom_point()
?subset
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_point()
head(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'))
head(results_dataframe)
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_bar()
ggplot(subset(total_change_dataframe, region != 'WS'),
aes(y=cumulative_change,x=region)) +
geom_col()
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col()
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col(aes(group = substitution_class))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col(aes(group = factor(region)))
head(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change))
head(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change))
head(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col(aes(colour = factor(region)))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col(aes(colour = factor(substitution_class)))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_point(aes(colour = factor(substitution_class)))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_point(aes(colour = factor(substitution_class))) +
0
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_point(aes(colour = factor(substitution_class)))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_point(aes(group = factor(region), colour = factor(substitution_class)))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_point(aes(shape = factor(region), colour = factor(substitution_class)))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col(aes(group = factor(region)))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col()
nrow(results_dataframe)
length(unique(results_dataframe$pair))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col(aes(fill = factor(region)))
ggplot(subset(results_dataframe, region != 'WS' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col(aes(fill = factor(region)), position = 'dodge')
ggplot(subset(results_dataframe, region = 'CDR' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col(aes(fill = factor(substitution_class)), position = 'dodge')
ggplot(subset(results_dataframe, region == 'CDR' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_col(aes(fill = factor(substitution_class)), position = 'dodge')
head(subset(results_dataframe, region == 'CDR' & substitution_class !=
'total'))
subset(results_dataframe, region == 'CDR' & substitution_class !=
'total')
ggplot(subset(results_dataframe, region == 'CDR' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_hline(yintercept = 0, linetype= '-')
ggplot(subset(results_dataframe, region == 'CDR' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_hline(yintercept = 0, linetype= 2)
ggplot(subset(results_dataframe, region == 'CDR' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_hline(yintercept = 0, linetype= 2)
geom_col(aes(fill = factor(substitution_class)), position = 'dodge')
ggplot(subset(results_dataframe, region == 'CDR' & substitution_class !=
'total'),
aes(x = pair, y = S5F_mutability_change)) +
geom_hline(yintercept = 0, linetype= 2) +
geom_col(aes(fill = factor(substitution_class)), position = 'dodge')
