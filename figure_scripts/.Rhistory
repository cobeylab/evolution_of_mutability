for(scenario in c('2c','2d','2e')){
file_path <- paste('../results/rates_vs_time/simulated_alignments/scenario',
scenario, '_rep1/scenario', scenario, '_rep1_rates_vs_time_correlations.csv', sep = '')
results_dataframe <- read.table(file_path, header = T, sep = ',')
plot_list_total_rate_RC[[scenario]] <- base_plot_time(results_dataframe, 'total_rate_RC')
}
library('coda')
plot_list_total_rate_RC <- c()
plot_list_S_rate <- c()
plot_list_N_rate <- c()
for(scenario in c('2c','2d','2e')){
file_path <- paste('../results/rates_vs_time/simulated_alignments/scenario',
scenario, '_rep1/scenario', scenario, '_rep1_rates_vs_time_correlations.csv', sep = '')
results_dataframe <- read.table(file_path, header = T, sep = ',')
plot_list_total_rate_RC[[scenario]] <- base_plot_time(results_dataframe, 'total_rate_RC')
}
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scientific_format()(x)))
}
base_plot_time <- function(results_dataframe, rate){
ylabel <- switch(rate,
total_rate = "Total substitution rate",
total_rate_RC = "Total substitution rate (RC)",
S_rate = "Synonymous substitution rate",
N_rate = "Non-synonymous rate")
intercept_column <- which(names(results_dataframe) == paste("intercept_",rate,"_vs_parent_time", sep = ''))
slope_column <- which(names(results_dataframe) == paste("slope_",rate,"_vs_parent_time", sep = ''))
r_column <- which(names(results_dataframe) == paste("r_",rate,"_vs_parent_time", sep = ''))
# Find mean and HPD for slope, intercept and R2
mean_slope <- mean(results_dataframe[, slope_column])
mean_intercept <- mean(results_dataframe[, intercept_column])
mean_r2 <- mean((results_dataframe[, r_column])^2)
slope_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, slope_column]), 0.95)
intercept_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, intercept_column]), 0.95)
r2_HPD_limits <- HPDinterval(as.mcmc((results_dataframe[, r_column])^2), 0.95)
# Plot:
# Subsampling: ggplot can't seem to plot a lot more than 800 lines:
subsample <- sample(1:nrow(results_dataframe), min(800,nrow(results_dataframe)), replace = F)
ymax <- mean(results_dataframe[subsample,paste('max_',rate,sep='')])
if(mean_intercept >= 0){
ymax <- min(c(ymax,1.5*mean_intercept))
}
ymin <- max(mean(results_dataframe[subsample,paste('min_',rate,sep='')]),
min(results_dataframe[subsample, intercept_column]))
if(mean_intercept>=0){
ymin <- max(c(ymin,0.5*mean_intercept))
}
xmax <- mean(results_dataframe[subsample,'max_parent_time'])
xmin <- mean(results_dataframe[subsample,'min_parent_time'])
pl <- ggplot() +
scale_x_continuous(expand = c(0,0), limits = c(xmin,xmax)) +
scale_y_continuous(expand = c(0,0), limits = c(ymin, ymax),label=scientific_10) +
theme_classic() +
xlab(paste("Time since MRCA (", time_units, ')', sep = '')) +
ylab(ylabel) +
ggplot_theme
for(i in subsample){
slope = results_dataframe[i, slope_column]
intercept <- results_dataframe[i, intercept_column]
pl <- pl + geom_abline(intercept = intercept, slope = slope, alpha = 0.1)
}
pl <- pl +  geom_abline(intercept = mean_intercept, slope = mean_slope,
colour = 'red', size = 2)
pl <- pl + ggtitle(paste('slope = ', signif(mean_slope,2),
" [", signif(slope_HPD_limits[1],3),
', ', signif(slope_HPD_limits[2],3),
']', sep = ''))
#annotate("text", x = 75, y = 0.00175,
#         label = paste('slope = ', signif(mean_slope,2),
#                       " [", signif(slope_HPD_limits[1],3), ' , ', signif(slope_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.0017,
#         label = paste('intercept = ', signif(mean_intercept,2),
#                       " [", signif(intercept_HPD_limits[1],3), ' , ', signif(intercept_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.00165,
#         label = paste('R-squared = ', signif(mean_r2,2),
#                       " [", signif(r2_HPD_limits[1],3), ' , ', signif(r2_HPD_limits[2],3), ']'
#                       , sep = ''))
return(pl)
}
plot_list_total_rate_RC <- c()
plot_list_S_rate <- c()
plot_list_N_rate <- c()
for(scenario in c('2c','2d','2e')){
file_path <- paste('../results/rates_vs_time/simulated_alignments/scenario',
scenario, '_rep1/scenario', scenario, '_rep1_rates_vs_time_correlations.csv', sep = '')
results_dataframe <- read.table(file_path, header = T, sep = ',')
plot_list_total_rate_RC[[scenario]] <- base_plot_time(results_dataframe, 'total_rate_RC')
}
base_plot_time <- function(results_dataframe, rate){
time_units <- 'generations'
ylabel <- switch(rate,
total_rate = "Total substitution rate",
total_rate_RC = "Total substitution rate (RC)",
S_rate = "Synonymous substitution rate",
N_rate = "Non-synonymous rate")
intercept_column <- which(names(results_dataframe) == paste("intercept_",rate,"_vs_parent_time", sep = ''))
slope_column <- which(names(results_dataframe) == paste("slope_",rate,"_vs_parent_time", sep = ''))
r_column <- which(names(results_dataframe) == paste("r_",rate,"_vs_parent_time", sep = ''))
# Find mean and HPD for slope, intercept and R2
mean_slope <- mean(results_dataframe[, slope_column])
mean_intercept <- mean(results_dataframe[, intercept_column])
mean_r2 <- mean((results_dataframe[, r_column])^2)
slope_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, slope_column]), 0.95)
intercept_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, intercept_column]), 0.95)
r2_HPD_limits <- HPDinterval(as.mcmc((results_dataframe[, r_column])^2), 0.95)
# Plot:
# Subsampling: ggplot can't seem to plot a lot more than 800 lines:
subsample <- sample(1:nrow(results_dataframe), min(800,nrow(results_dataframe)), replace = F)
ymax <- mean(results_dataframe[subsample,paste('max_',rate,sep='')])
if(mean_intercept >= 0){
ymax <- min(c(ymax,1.5*mean_intercept))
}
ymin <- max(mean(results_dataframe[subsample,paste('min_',rate,sep='')]),
min(results_dataframe[subsample, intercept_column]))
if(mean_intercept>=0){
ymin <- max(c(ymin,0.5*mean_intercept))
}
xmax <- mean(results_dataframe[subsample,'max_parent_time'])
xmin <- mean(results_dataframe[subsample,'min_parent_time'])
pl <- ggplot() +
scale_x_continuous(expand = c(0,0), limits = c(xmin,xmax)) +
scale_y_continuous(expand = c(0,0), limits = c(ymin, ymax),label=scientific_10) +
theme_classic() +
xlab(paste("Time since MRCA (", time_units, ')', sep = '')) +
ylab(ylabel) +
ggplot_theme
for(i in subsample){
slope = results_dataframe[i, slope_column]
intercept <- results_dataframe[i, intercept_column]
pl <- pl + geom_abline(intercept = intercept, slope = slope, alpha = 0.1)
}
pl <- pl +  geom_abline(intercept = mean_intercept, slope = mean_slope,
colour = 'red', size = 2)
pl <- pl + ggtitle(paste('slope = ', signif(mean_slope,2),
" [", signif(slope_HPD_limits[1],3),
', ', signif(slope_HPD_limits[2],3),
']', sep = ''))
#annotate("text", x = 75, y = 0.00175,
#         label = paste('slope = ', signif(mean_slope,2),
#                       " [", signif(slope_HPD_limits[1],3), ' , ', signif(slope_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.0017,
#         label = paste('intercept = ', signif(mean_intercept,2),
#                       " [", signif(intercept_HPD_limits[1],3), ' , ', signif(intercept_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.00165,
#         label = paste('R-squared = ', signif(mean_r2,2),
#                       " [", signif(r2_HPD_limits[1],3), ' , ', signif(r2_HPD_limits[2],3), ']'
#                       , sep = ''))
return(pl)
}
plot_list_total_rate_RC <- c()
plot_list_S_rate <- c()
plot_list_N_rate <- c()
for(scenario in c('2c','2d','2e')){
file_path <- paste('../results/rates_vs_time/simulated_alignments/scenario',
scenario, '_rep1/scenario', scenario, '_rep1_rates_vs_time_correlations.csv', sep = '')
results_dataframe <- read.table(file_path, header = T, sep = ',')
plot_list_total_rate_RC[[scenario]] <- base_plot_time(results_dataframe, 'total_rate_RC')
}
base_plot_time <- function(results_dataframe, rate){
time_units <- 'generations'
ylabel <- switch(rate,
total_rate = "Total substitution rate",
total_rate_RC = "Total substitution rate (RC)",
S_rate = "Synonymous substitution rate",
N_rate = "Non-synonymous rate")
intercept_column <- which(names(results_dataframe) == paste("intercept_",rate,"_vs_parent_time", sep = ''))
slope_column <- which(names(results_dataframe) == paste("slope_",rate,"_vs_parent_time", sep = ''))
r_column <- which(names(results_dataframe) == paste("r_",rate,"_vs_parent_time", sep = ''))
# Find mean and HPD for slope, intercept and R2
mean_slope <- mean(results_dataframe[, slope_column])
mean_intercept <- mean(results_dataframe[, intercept_column])
mean_r2 <- mean((results_dataframe[, r_column])^2)
slope_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, slope_column]), 0.95)
intercept_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, intercept_column]), 0.95)
r2_HPD_limits <- HPDinterval(as.mcmc((results_dataframe[, r_column])^2), 0.95)
# Plot:
# Subsampling: ggplot can't seem to plot a lot more than 800 lines:
subsample <- sample(1:nrow(results_dataframe), min(500,nrow(results_dataframe)), replace = F)
ymax <- mean(results_dataframe[subsample,paste('max_',rate,sep='')])
if(mean_intercept >= 0){
ymax <- min(c(ymax,1.5*mean_intercept))
}
ymin <- max(mean(results_dataframe[subsample,paste('min_',rate,sep='')]),
min(results_dataframe[subsample, intercept_column]))
if(mean_intercept>=0){
ymin <- max(c(ymin,0.5*mean_intercept))
}
xmax <- mean(results_dataframe[subsample,'max_parent_time'])
xmin <- mean(results_dataframe[subsample,'min_parent_time'])
pl <- ggplot() +
scale_x_continuous(expand = c(0,0), limits = c(xmin,xmax)) +
scale_y_continuous(expand = c(0,0), limits = c(ymin, ymax),label=scientific_10) +
theme_classic() +
xlab(paste("Time since MRCA (", time_units, ')', sep = '')) +
ylab(ylabel) +
ggplot_theme
for(i in subsample){
slope = results_dataframe[i, slope_column]
intercept <- results_dataframe[i, intercept_column]
pl <- pl + geom_abline(intercept = intercept, slope = slope, alpha = 0.1)
}
pl <- pl +  geom_abline(intercept = mean_intercept, slope = mean_slope,
colour = 'red', size = 2)
pl <- pl + ggtitle(paste('slope = ', signif(mean_slope,2),
" [", signif(slope_HPD_limits[1],3),
', ', signif(slope_HPD_limits[2],3),
']', sep = ''))
#annotate("text", x = 75, y = 0.00175,
#         label = paste('slope = ', signif(mean_slope,2),
#                       " [", signif(slope_HPD_limits[1],3), ' , ', signif(slope_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.0017,
#         label = paste('intercept = ', signif(mean_intercept,2),
#                       " [", signif(intercept_HPD_limits[1],3), ' , ', signif(intercept_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.00165,
#         label = paste('R-squared = ', signif(mean_r2,2),
#                       " [", signif(r2_HPD_limits[1],3), ' , ', signif(r2_HPD_limits[2],3), ']'
#                       , sep = ''))
return(pl)
}
plot_list_total_rate_RC <- c()
plot_list_S_rate <- c()
plot_list_N_rate <- c()
for(scenario in c('2c','2d','2e')){
file_path <- paste('../results/rates_vs_time/simulated_alignments/scenario',
scenario, '_rep1/scenario', scenario, '_rep1_rates_vs_time_correlations.csv', sep = '')
results_dataframe <- read.table(file_path, header = T, sep = ',')
plot_list_total_rate_RC[[scenario]] <- base_plot_time(results_dataframe, 'total_rate_RC')
}
plot_list_total_rate_RC$`2c`
??scientific_format
library('scales')
# Function for making ggplot show axis labels in exponent notation
# From http://stackoverflow.com/questions/10762287/how-can-i-format-axis-labels-with-exponents-with-ggplot2-and-scales
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scientific_format()(x)))
}
base_plot_time <- function(results_dataframe, rate){
time_units <- 'generations'
ylabel <- switch(rate,
total_rate = "Total substitution rate",
total_rate_RC = "Total substitution rate (RC)",
S_rate = "Synonymous substitution rate",
N_rate = "Non-synonymous rate")
intercept_column <- which(names(results_dataframe) == paste("intercept_",rate,"_vs_parent_time", sep = ''))
slope_column <- which(names(results_dataframe) == paste("slope_",rate,"_vs_parent_time", sep = ''))
r_column <- which(names(results_dataframe) == paste("r_",rate,"_vs_parent_time", sep = ''))
# Find mean and HPD for slope, intercept and R2
mean_slope <- mean(results_dataframe[, slope_column])
mean_intercept <- mean(results_dataframe[, intercept_column])
mean_r2 <- mean((results_dataframe[, r_column])^2)
slope_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, slope_column]), 0.95)
intercept_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, intercept_column]), 0.95)
r2_HPD_limits <- HPDinterval(as.mcmc((results_dataframe[, r_column])^2), 0.95)
# Plot:
# Subsampling: ggplot can't seem to plot a lot more than 800 lines:
subsample <- sample(1:nrow(results_dataframe), min(500,nrow(results_dataframe)), replace = F)
ymax <- mean(results_dataframe[subsample,paste('max_',rate,sep='')])
if(mean_intercept >= 0){
ymax <- min(c(ymax,1.5*mean_intercept))
}
ymin <- max(mean(results_dataframe[subsample,paste('min_',rate,sep='')]),
min(results_dataframe[subsample, intercept_column]))
if(mean_intercept>=0){
ymin <- max(c(ymin,0.5*mean_intercept))
}
xmax <- mean(results_dataframe[subsample,'max_parent_time'])
xmin <- mean(results_dataframe[subsample,'min_parent_time'])
pl <- ggplot() +
scale_x_continuous(expand = c(0,0), limits = c(xmin,xmax)) +
scale_y_continuous(expand = c(0,0), limits = c(ymin, ymax),label=scientific_10) +
theme_classic() +
xlab(paste("Time since MRCA (", time_units, ')', sep = '')) +
ylab(ylabel) +
ggplot_theme
for(i in subsample){
slope = results_dataframe[i, slope_column]
intercept <- results_dataframe[i, intercept_column]
pl <- pl + geom_abline(intercept = intercept, slope = slope, alpha = 0.1)
}
pl <- pl +  geom_abline(intercept = mean_intercept, slope = mean_slope,
colour = 'red', size = 2)
pl <- pl + ggtitle(paste('slope = ', signif(mean_slope,2),
" [", signif(slope_HPD_limits[1],3),
', ', signif(slope_HPD_limits[2],3),
']', sep = ''))
#annotate("text", x = 75, y = 0.00175,
#         label = paste('slope = ', signif(mean_slope,2),
#                       " [", signif(slope_HPD_limits[1],3), ' , ', signif(slope_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.0017,
#         label = paste('intercept = ', signif(mean_intercept,2),
#                       " [", signif(intercept_HPD_limits[1],3), ' , ', signif(intercept_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.00165,
#         label = paste('R-squared = ', signif(mean_r2,2),
#                       " [", signif(r2_HPD_limits[1],3), ' , ', signif(r2_HPD_limits[2],3), ']'
#                       , sep = ''))
return(pl)
}
plot_list_total_rate_RC <- c()
plot_list_S_rate <- c()
plot_list_N_rate <- c()
for(scenario in c('2c','2d','2e')){
file_path <- paste('../results/rates_vs_time/simulated_alignments/scenario',
scenario, '_rep1/scenario', scenario, '_rep1_rates_vs_time_correlations.csv', sep = '')
results_dataframe <- read.table(file_path, header = T, sep = ',')
plot_list_total_rate_RC[[scenario]] <- base_plot_time(results_dataframe, 'total_rate_RC')
}
plot_list_total_rate_RC[['2c']]
plot_list_total_rate_RC <- c()
plot_list_S_rate <- c()
plot_list_N_rate <- c()
for(scenario in c('2c','2d','2e','3a','3b','3c')){
file_path <- paste('../results/rates_vs_time/simulated_alignments/scenario',
scenario, '_rep1/scenario', scenario, '_rep1_rates_vs_time_correlations.csv', sep = '')
results_dataframe <- read.table(file_path, header = T, sep = ',')
plot_list_total_rate_RC[[scenario]] <- base_plot_time(results_dataframe, 'total_rate_RC')
plot_list_S_rate[[scenario]] <- base_plot_time(results_dataframe, 'S_rate')
plot_list_N_rate[[scenario]] <- base_plot_time(results_dataframe, 'N_rate')
}
plot_list_N_rate[['2e']]
library('cowplot')
??cowplot
plot_grid(plot_list_total_rate_RC)
plot_grid(plot_list_total_rate_RC[['2c']])
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']])
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']], labels = c("A", "B"))
base_plot_time <- function(results_dataframe, rate){
time_units <- 'generations'
ylabel <- switch(rate,
total_rate = "Total substitution rate",
total_rate_RC = "Total substitution rate (RC)",
S_rate = "Synonymous substitution rate",
N_rate = "Non-synonymous rate")
intercept_column <- which(names(results_dataframe) == paste("intercept_",rate,"_vs_parent_time", sep = ''))
slope_column <- which(names(results_dataframe) == paste("slope_",rate,"_vs_parent_time", sep = ''))
r_column <- which(names(results_dataframe) == paste("r_",rate,"_vs_parent_time", sep = ''))
# Find mean and HPD for slope, intercept and R2
mean_slope <- mean(results_dataframe[, slope_column])
mean_intercept <- mean(results_dataframe[, intercept_column])
mean_r2 <- mean((results_dataframe[, r_column])^2)
slope_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, slope_column]), 0.95)
intercept_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, intercept_column]), 0.95)
r2_HPD_limits <- HPDinterval(as.mcmc((results_dataframe[, r_column])^2), 0.95)
# Plot:
# Subsampling: ggplot can't seem to plot a lot more than 800 lines:
subsample <- sample(1:nrow(results_dataframe), min(500,nrow(results_dataframe)), replace = F)
ymax <- mean(results_dataframe[subsample,paste('max_',rate,sep='')])
if(mean_intercept >= 0){
ymax <- min(c(ymax,1.5*mean_intercept))
}
ymin <- max(mean(results_dataframe[subsample,paste('min_',rate,sep='')]),
min(results_dataframe[subsample, intercept_column]))
if(mean_intercept>=0){
ymin <- max(c(ymin,0.5*mean_intercept))
}
xmax <- mean(results_dataframe[subsample,'max_parent_time'])
xmin <- mean(results_dataframe[subsample,'min_parent_time'])
pl <- ggplot() +
scale_x_continuous(expand = c(0,0), limits = c(xmin,xmax)) +
scale_y_continuous(expand = c(0,0), limits = c(ymin, ymax),label=scientific_10) +
xlab(paste("Time since MRCA (", time_units, ')', sep = '')) +
ylab(ylabel) +
ggplot_theme
for(i in subsample){
slope = results_dataframe[i, slope_column]
intercept <- results_dataframe[i, intercept_column]
pl <- pl + geom_abline(intercept = intercept, slope = slope, alpha = 0.1)
}
pl <- pl +  geom_abline(intercept = mean_intercept, slope = mean_slope,
colour = 'red', size = 2)
pl <- pl + ggtitle(paste('slope = ', signif(mean_slope,2),
" [", signif(slope_HPD_limits[1],3),
', ', signif(slope_HPD_limits[2],3),
']', sep = ''))
#annotate("text", x = 75, y = 0.00175,
#         label = paste('slope = ', signif(mean_slope,2),
#                       " [", signif(slope_HPD_limits[1],3), ' , ', signif(slope_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.0017,
#         label = paste('intercept = ', signif(mean_intercept,2),
#                       " [", signif(intercept_HPD_limits[1],3), ' , ', signif(intercept_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.00165,
#         label = paste('R-squared = ', signif(mean_r2,2),
#                       " [", signif(r2_HPD_limits[1],3), ' , ', signif(r2_HPD_limits[2],3), ']'
#                       , sep = ''))
return(pl)
}
plot_list_total_rate_RC <- c()
plot_list_S_rate <- c()
plot_list_N_rate <- c()
for(scenario in c('2c','2d','2e','3a','3b','3c')){
file_path <- paste('../results/rates_vs_time/simulated_alignments/scenario',
scenario, '_rep1/scenario', scenario, '_rep1_rates_vs_time_correlations.csv', sep = '')
results_dataframe <- read.table(file_path, header = T, sep = ',')
plot_list_total_rate_RC[[scenario]] <- base_plot_time(results_dataframe, 'total_rate_RC')
plot_list_S_rate[[scenario]] <- base_plot_time(results_dataframe, 'S_rate')
plot_list_N_rate[[scenario]] <- base_plot_time(results_dataframe, 'N_rate')
}
?plot_grid
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']], plot_list_N_rate[['2c']],
plot_list_total_rate_RC[['2d']],plot_list_S_rate[['2d']], plot_list_N_rate[['2d']],
plot_list_total_rate_RC[['2e']],plot_list_S_rate[['2e']], plot_list_N_rate[['2e']],
nrow = 3, ncol = 3)
library('ggplot2')
library('reshape')
library('gridExtra')
library('grid')
library('coda')
library('scales')
library('cowplot')
source('ggplot_parameters.R')
# Function for making ggplot show axis labels in exponent notation
# From http://stackoverflow.com/questions/10762287/how-can-i-format-axis-labels-with-exponents-with-ggplot2-and-scales
scientific_10 <- function(x) {
parse(text=gsub("e", " %*% 10^", scientific_format()(x)))
}
# ===== DEFINING BASE PLOTTING FUNCTION FOR RATES VS TIME LINES =====
base_plot_time <- function(results_dataframe, rate){
time_units <- 'generations'
ylabel <- switch(rate,
total_rate = "Total substitution rate",
total_rate_RC = "Total substitution rate (RC)",
S_rate = "Synonymous substitution rate",
N_rate = "Non-synonymous rate")
intercept_column <- which(names(results_dataframe) == paste("intercept_",rate,"_vs_parent_time", sep = ''))
slope_column <- which(names(results_dataframe) == paste("slope_",rate,"_vs_parent_time", sep = ''))
r_column <- which(names(results_dataframe) == paste("r_",rate,"_vs_parent_time", sep = ''))
# Find mean and HPD for slope, intercept and R2
mean_slope <- mean(results_dataframe[, slope_column])
mean_intercept <- mean(results_dataframe[, intercept_column])
mean_r2 <- mean((results_dataframe[, r_column])^2)
slope_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, slope_column]), 0.95)
intercept_HPD_limits <- HPDinterval(as.mcmc(results_dataframe[, intercept_column]), 0.95)
r2_HPD_limits <- HPDinterval(as.mcmc((results_dataframe[, r_column])^2), 0.95)
# Plot:
# Subsampling: ggplot can't seem to plot a lot more than 800 lines:
subsample <- sample(1:nrow(results_dataframe), min(500,nrow(results_dataframe)), replace = F)
ymax <- mean(results_dataframe[subsample,paste('max_',rate,sep='')])
if(mean_intercept >= 0){
ymax <- min(c(ymax,1.5*mean_intercept))
}
ymin <- max(mean(results_dataframe[subsample,paste('min_',rate,sep='')]),
min(results_dataframe[subsample, intercept_column]))
if(mean_intercept>=0){
ymin <- max(c(ymin,0.5*mean_intercept))
}
xmax <- mean(results_dataframe[subsample,'max_parent_time'])
xmin <- mean(results_dataframe[subsample,'min_parent_time'])
pl <- ggplot() +
scale_x_continuous(expand = c(0,0), limits = c(xmin,xmax)) +
scale_y_continuous(expand = c(0,0), limits = c(ymin, ymax),label=scientific_10) +
xlab(paste("Time since MRCA (", time_units, ')', sep = '')) +
ylab(ylabel) +
ggplot_theme
for(i in subsample){
slope = results_dataframe[i, slope_column]
intercept <- results_dataframe[i, intercept_column]
pl <- pl + geom_abline(intercept = intercept, slope = slope, alpha = 0.1)
}
pl <- pl +  geom_abline(intercept = mean_intercept, slope = mean_slope,
colour = 'red', size = 2)
pl <- pl + ggtitle(paste('slope = ', signif(mean_slope,2),
" [", signif(slope_HPD_limits[1],3),
', ', signif(slope_HPD_limits[2],3),
']', sep = ''))
#annotate("text", x = 75, y = 0.00175,
#         label = paste('slope = ', signif(mean_slope,2),
#                       " [", signif(slope_HPD_limits[1],3), ' , ', signif(slope_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.0017,
#         label = paste('intercept = ', signif(mean_intercept,2),
#                       " [", signif(intercept_HPD_limits[1],3), ' , ', signif(intercept_HPD_limits[2],3), ']'
#                       , sep = '')) +
#annotate("text", x = 75, y = 0.00165,
#         label = paste('R-squared = ', signif(mean_r2,2),
#                       " [", signif(r2_HPD_limits[1],3), ' , ', signif(r2_HPD_limits[2],3), ']'
#                       , sep = ''))
return(pl)
}
plot_list_total_rate_RC <- c()
plot_list_S_rate <- c()
plot_list_N_rate <- c()
for(scenario in c('2c','2d','2e','3a','3b','3c')){
file_path <- paste('../results/rates_vs_time/simulated_alignments/scenario',
scenario, '_rep1/scenario', scenario, '_rep1_rates_vs_time_correlations.csv', sep = '')
results_dataframe <- read.table(file_path, header = T, sep = ',')
plot_list_total_rate_RC[[scenario]] <- base_plot_time(results_dataframe, 'total_rate_RC')
plot_list_S_rate[[scenario]] <- base_plot_time(results_dataframe, 'S_rate')
plot_list_N_rate[[scenario]] <- base_plot_time(results_dataframe, 'N_rate')
}
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']], plot_list_N_rate[['2c']])
?plot_grid
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']], plot_list_N_rate[['2c']], ncol = 3)
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']], plot_list_N_rate[['2c']], nrow=1)
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']], plot_list_N_rate[['2c']],
plot_list_total_rate_RC[['2d']],plot_list_S_rate[['2d']], plot_list_N_rate[['2d']]
nrow=2)
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']], plot_list_N_rate[['2c']],
plot_list_total_rate_RC[['2d']],plot_list_S_rate[['2d']], plot_list_N_rate[['2d']],
nrow=2)
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']], plot_list_N_rate[['2c']],
plot_list_total_rate_RC[['2d']],plot_list_S_rate[['2d']], plot_list_N_rate[['2d']])
plot_grid(plot_list_total_rate_RC[['2c']],plot_list_S_rate[['2c']], plot_list_N_rate[['2c']],
plot_list_total_rate_RC[['2d']],plot_list_S_rate[['2d']])
