as.character(x)
expression(as.character(x))
bquote(as.character(x))
bquote(.(as.character(x)))
bquote(.(scientific_10(0.01)))
bquote(.(as.character(scientific_10(0.01))))
bquote(.(as.character(scientific_10(0.01))))
class(bquote(.(as.character(scientific_10(0.01)))))
exp(bquote(.(as.character(scientific_10(0.01)))))
expr(bquote(.(as.character(scientific_10(0.01)))))
bquote(.(as.character(scientific_10(0.01))))
expression(bquote(.(as.character(scientific_10(0.01)))))
x + ggtitle(scientific_10(0.01))
x + ggtitle(bquote(Slope == .(a)))
x + ggtitle(bquote(Slope == 1))
ggplot(data.frame(x=1:10,y=1:10), aes(x=x,y=y)) + geom_point() + ggtitle(expression(paste('Slope = ', 1 %*% 10^-02)))
ggplot(data.frame(x=1:10,y=1:10), aes(x=x,y=y)) + geom_point() + ggtitle(expression(paste('Slope = ', 1 %*% 10^-02)))
x + ggtitle(expression(paste('Slope = ', 1 %*% 10^-02)))
x <- ggplot(data.frame(x=1:10,y=1:10), aes(x=x,y=y)) + geom_point()
x
x + ggtitle(expression(paste('Slope = ', 1 %*% 10^-02)))
ggtitle(expression(paste('Slope = ', '1 %*% 10^-02')))
x + ggtitle(expression(paste('Slope = ', '1 %*% 10^-02')))
x + ggtitle(expression(paste('Slope = ', 1 %*% 10^-02)))
expression(paste('Slope = ', 1 %*% 10^-02))
x + ggtitle(scientific_10(0.01))
ggtitle
?ggtitle
paste('x', )
paste('x', scientific_10(0.01))
expression(paste('x', scientific_10(0.01)))
('x', scientific_10(0.01))
paste('x', scientific_10(0.01))
paste('x = ', scientific_10(0.01))
as.expression(paste('x = ', scientific_10(0.01)))
scientific_10(0.01)
eval('a = 1')
eval(a = 1)
eval(a == 1)
expression(paste('Slope = ', 1 %*% 10^-02))
x + ggtitle(expression(bquote('Slope = ', .(a))))
x + ggtitle(expression(bquote(Slope = .(a))))
x +
x + ggtitle(expression(paste('Slope = ', 1 %*% 10^-02)))
x + ggtitle(expression(paste('Slope = ', 1 %*% 10^-02)))
x + ggtitle(expression(paste('Slope = ', 1 %*% 10^-02)))
x + ggtitle(scientific_10(0.01))
x + ggtitle(expression(paste('Slope = ', scientific_10(0.01)   )))
x + ggtitle(expression(paste('Slope = ', parse(scientific_10(0.01))   )))
scientific_10(0.01)
as.charecter(scientific_10(0.01))
as.character(scientific_10(0.01))
parse(as.character(scientific_10(0.01)))
parse(text = as.character(scientific_10(0.01)))
x + ggtitle(expression(paste('Slope = ', expression(1 %*% 10^-2))))
x + ggtitle(expression(paste('Slope = ', 1 %*% 10^-02)))
scientific_10(0.01)
paste('Slope = ', 1 %*% 10^-02))
paste('Slope = ', 1 %*% 10^-02)
paste('Slope = ', 1 %*% 10^-02)
paste('Slope = ', scientific_10(0.01))
expression(paste('Slope = ', scientific_10(0.01)))
expression(1 + 2)
eval(expression(1 + 2))
eval(expression(paste('Slope = ', 1 %*% 10^-02)))
paste('Slope = ', scientific_10(0.01))
eval(paste('Slope = ', scientific_10(0.01)))
expression(eval(paste('Slope = ', scientific_10(0.01))))
paste('Slope = ', scientific_10(0.01))
parse(text = paste('Slope = ', scientific_10(0.01)))
x + ggtitle(parse(text = paste('Slope = ', scientific_10(0.01))))
x + ggtitle(parse(text = paste('Slope == ', scientific_10(0.01))))
pl + ggtitle(parse(text = paste('Slope == ', scientific_10(mean_slope_all))))
pl + ggtitle(parse(text = paste('Slope == ',
scientific_10(mean_slope_all),
'[',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
']',
sep = ''
)
)
)
pl + ggtitle(parse(text = paste('Slope == ',
scientific_10(mean_slope_all),
'\[',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
'\]',
sep = ''
)
)
)
parse(text = paste('Slope == ',
scientific_10(mean_slope_all),
'\[',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
'\]',
sep = ''
)
)
parse(text = paste('Slope == ',
scientific_10(mean_slope_all),
'[',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
']',
sep = ''
)
)
pl + ggtitle(parse(text = paste('Slope == ',
scientific_10(mean_slope_all),
'"[',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
']"',
sep = ''
)
)
)
pl + ggtitle(parse(text = paste('Slope == ',
scientific_10(mean_slope_all),
'\[',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
'\]',
sep = ''
)
)
)
pl + ggtitle(parse(text = paste('Slope == ',
scientific_10(mean_slope_all),
'(',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
parse(text = paste('Slope == ',
scientific_10(mean_slope_all),
'(',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
parse(text = paste('Slope == [',
scientific_10(mean_slope_all),
'](',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}(',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}(',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
expression(8[5,3])
eval(expression(8[5,3]))
paste(eval(expression(8[5,3])))
pasge(expression(8[5,3]))
paste(expression(8[5,3]))
paste(expression(8[5]))
pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}[',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
']',
sep = ''
)
)
)
pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}(',
scientific_10(slope_all_llim),
';',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}(',
scientific_10(slope_all_llim),
'--',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}(',
scientific_10(slope_all_llim),
'--',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}(',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
pl <- pl + geom_abline(slope=mean_slope_all,
intercept=mean_intercept_all,
colour = 'red', linetype = line_type_all)
# Add mean line for regressions including observed nodes only
pl <- pl + geom_abline(slope=mean_slope_obs,
intercept=mean_intercept_obs,
colour = 'red', linetype = line_type_obs)
pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}(',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
base_plot <- function(points_dataframe, regressions_dataframe, metric,
region, theme_specs, time_units, tree_sample_size = 100){
ylabel <- switch(metric,
S5F = 'Mean S5F mutability',
X7M = 'Mean 7-mer mutability',
HS = 'Number of hotspots',
CS = 'Number of coldspots',
OHS = 'Number of overlapping hotspots')
ylabel <- paste(ylabel, ' (', region, ')', sep = '')
tree_sample <- sample(unique(points_dataframe$tree), tree_sample_size, replace = F)
# Finding mean slope and mean intercept from the posterior distribution
# (with a little workaround for the naming issue with 7M)
mean_intercept_all <- mean(regressions_dataframe[, paste('intercept_',
ifelse(metric=='X7M',substr(metric,2,3),metric),
'_',region,'_vs_node_time',sep='')])
#Mean intercept for regressions including observed nodes only
mean_intercept_obs <- mean(regressions_dataframe[, paste('intercept_',
ifelse(metric=='X7M',substr(metric,2,3),metric),
'_',region,'_vs_node_time_obs_only',sep='')])
# Slope values for regressions including all nodes
slope_values_all <- regressions_dataframe[, paste('slope_',ifelse(metric=='X7M',substr(metric,2,3),metric)
,'_',region,'_vs_node_time',sep='')]
# Slope values for regressions including observed nodes only
slope_values_obs <- regressions_dataframe[, paste('slope_',ifelse(metric=='X7M',substr(metric,2,3),metric)
,'_',region,'_vs_node_time_obs_only',sep='')]
# Slope values for obs. nodes only should all be the same. Stop if they are not
stopifnot(sd(slope_values_obs) == 0)
mean_slope_all <- mean(slope_values_all)
mean_slope_obs <- mean(slope_values_obs)
# Find 95% HPD interval for slope (all nodes only):
slope_all_HPD_limits <- HPDinterval(as.mcmc(slope_values_all),
0.95)
slope_all_llim <- slope_all_HPD_limits[1]
slope_all_ulim <- slope_all_HPD_limits[2]
# Use a solid line for the mean regression line including all nodes
line_type_all <- 1
# Use a dashed line for the regression line including obs nodes only
line_type_obs <- 5
# Maximum time
max_time <-  max(points_dataframe[points_dataframe$tree %in% tree_sample,
'node_time'])
# Plot:
pl <- ggplot() +
xlab(paste("Time at node (",time_units,')',sep='')) +
ylab(ylabel) +
ggplot_theme +
# Internal: black (grey25), Terminal: blue ('royalblue1')
scale_colour_manual(values=c("grey25",'royalblue1'))
for(tree in tree_sample){
dataframe_subset <- points_dataframe[points_dataframe$tree == tree,]
x <- dataframe_subset[,'node_time']
y <- dataframe_subset[,paste(metric,'_',region, sep='')]
factor <- factor(dataframe_subset[,'node_is_tip'])
pl <- pl + geom_point(data=data.frame(x,y,factor),
aes(x=x,y=y, colour = factor), size = 1,
alpha = 0.8)
}
# Add "mean line" (line with mean slope and mean intercept) for regressions including all nodes
pl <- pl + geom_abline(slope=mean_slope_all,
intercept=mean_intercept_all,
colour = 'red', linetype = line_type_all)
# Add mean line for regressions including observed nodes only
pl <- pl + geom_abline(slope=mean_slope_obs,
intercept=mean_intercept_obs,
colour = 'red', linetype = line_type_obs)
# Add mean slope and 95% Cred.I (for regressions involving all points)
pl <- pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}(',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
# Subplot with posterior distribution of slope
# # Expand axis to fit inset plots
# pl <- pl + scale_x_continuous(limits = c(0, 1.25*max_time))
#
# # Data-frame for shading region under density curve in inset plot
# shading_dataframe <- data.frame(slope_values_all)
# shading_dataframe <- with(density(shading_dataframe$slope_values_all,na.rm=T), data.frame(x, y))
#
# subpl <- ggplot(data.frame(slope=slope_values_all), aes(x=slope)) +
#
#   # Added shaded region under slope posterior density curve
#   geom_area(data = shading_dataframe,
#                     mapping = aes(y = ifelse(x>slope_all_llim & x< slope_all_ulim, y, 0),x),
#                     fill = "snow2") +
#   # Add curve:
#   geom_density() +
#
#   # Add line indicating mean slope for all points:
#   geom_vline(xintercept = mean_slope_all, linetype = line_type_all, colour = 'red') +
#
#   # Add line indicating slope for obs points only:
#   geom_vline(xintercept = mean_slope_obs, linetype = line_type_obs, colour = 'red') +
#
#   theme(axis.text=element_text(size=x_axis_text_size_subplot),
#         axis.title=element_text(size=axis_title_size_subplot, margin = margin(0,0,0,0)),
#         axis.line.x = element_line(colour="black", size = 0.3),
#         axis.line.y = element_line(colour="black",  size = 0.3),
#         plot.title = element_text(size=2)
#   ) +
#   ylab("Density") +
#   xlab("Slope") +
#   #expand_limits(x = 0) +
#   scale_x_continuous(labels = function(x) format(x, scientific=TRUE)) +
#   #scale_x_continuous(limits = c(-0.001,0.001)) +
#   scale_y_continuous(expand = c(0,0)) +
#   geom_vline(xintercept = 0, linetype = 2)
#
#
# return(list('main_plot' = pl, 'subplot' = subpl))
return(pl)
}
library('ggplot2')
library('coda')
# Load ggplot parameters
source('ggplot_parameters.R')
points_file_path <- '../results/mutability_vs_time/observed_lineages/CH103_constant/CH103_con_run1a_mutability_vs_time_points.csv'
regressions_file_path <- '../results/mutability_vs_time/observed_lineages/CH103_constant/CH103_con_run1a_mutability_vs_time_correlations.csv'
points_dataframe <- read.csv(points_file_path)
regressions_dataframe <- read.csv(regressions_file_path)
metric = 'S5F'
region =
'WS'
region
theme_specs = ggplot_theme
time_units <- 'weeks'
ylabel <- switch(metric,
S5F = 'Mean S5F mutability',
X7M = 'Mean 7-mer mutability',
HS = 'Number of hotspots',
CS = 'Number of coldspots',
OHS = 'Number of overlapping hotspots')
ylabel <- paste(ylabel, ' (', region, ')', sep = '')
tree_sample <- sample(unique(points_dataframe$tree), tree_sample_size, replace = F)
# Finding mean slope and mean intercept from the posterior distribution
# (with a little workaround for the naming issue with 7M)
mean_intercept_all <- mean(regressions_dataframe[, paste('intercept_',
ifelse(metric=='X7M',substr(metric,2,3),metric),
'_',region,'_vs_node_time',sep='')])
#Mean intercept for regressions including observed nodes only
mean_intercept_obs <- mean(regressions_dataframe[, paste('intercept_',
ifelse(metric=='X7M',substr(metric,2,3),metric),
'_',region,'_vs_node_time_obs_only',sep='')])
# Slope values for regressions including all nodes
slope_values_all <- regressions_dataframe[, paste('slope_',ifelse(metric=='X7M',substr(metric,2,3),metric)
,'_',region,'_vs_node_time',sep='')]
# Slope values for regressions including observed nodes only
slope_values_obs <- regressions_dataframe[, paste('slope_',ifelse(metric=='X7M',substr(metric,2,3),metric)
,'_',region,'_vs_node_time_obs_only',sep='')]
# Slope values for obs. nodes only should all be the same. Stop if they are not
stopifnot(sd(slope_values_obs) == 0)
mean_slope_all <- mean(slope_values_all)
mean_slope_obs <- mean(slope_values_obs)
# Find 95% HPD interval for slope (all nodes only):
slope_all_HPD_limits <- HPDinterval(as.mcmc(slope_values_all),
0.95)
slope_all_llim <- slope_all_HPD_limits[1]
slope_all_ulim <- slope_all_HPD_limits[2]
# Use a solid line for the mean regression line including all nodes
line_type_all <- 1
# Use a dashed line for the regression line including obs nodes only
line_type_obs <- 5
# Maximum time
max_time <-  max(points_dataframe[points_dataframe$tree %in% tree_sample,
'node_time'])
# Plot:
pl <- ggplot() +
xlab(paste("Time at node (",time_units,')',sep='')) +
ylab(ylabel) +
ggplot_theme +
# Internal: black (grey25), Terminal: blue ('royalblue1')
scale_colour_manual(values=c("grey25",'royalblue1'))
for(tree in tree_sample){
dataframe_subset <- points_dataframe[points_dataframe$tree == tree,]
x <- dataframe_subset[,'node_time']
y <- dataframe_subset[,paste(metric,'_',region, sep='')]
factor <- factor(dataframe_subset[,'node_is_tip'])
pl <- pl + geom_point(data=data.frame(x,y,factor),
aes(x=x,y=y, colour = factor), size = 1,
alpha = 0.8)
}
# Add "mean line" (line with mean slope and mean intercept) for regressions including all nodes
pl <- pl + geom_abline(slope=mean_slope_all,
intercept=mean_intercept_all,
colour = 'red', linetype = line_type_all)
# Add mean line for regressions including observed nodes only
pl <- pl + geom_abline(slope=mean_slope_obs,
intercept=mean_intercept_obs,
colour = 'red', linetype = line_type_obs)
# Add mean slope and 95% Cred.I (for regressions involving all points)
pl <- pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'}(',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
pl
# Plot:
pl <- ggplot() +
xlab(paste("Time at node (",time_units,')',sep='')) +
ylab(ylabel) +
ggplot_theme +
# Internal: black (grey25), Terminal: blue ('royalblue1')
scale_colour_manual(values=c("grey25",'royalblue1'))
for(tree in tree_sample){
dataframe_subset <- points_dataframe[points_dataframe$tree == tree,]
x <- dataframe_subset[,'node_time']
y <- dataframe_subset[,paste(metric,'_',region, sep='')]
factor <- factor(dataframe_subset[,'node_is_tip'])
pl <- pl + geom_point(data=data.frame(x,y,factor),
aes(x=x,y=y, colour = factor), size = 1,
alpha = 0.8)
}
# Add "mean line" (line with mean slope and mean intercept) for regressions including all nodes
pl <- pl + geom_abline(slope=mean_slope_all,
intercept=mean_intercept_all,
colour = 'red', linetype = line_type_all)
# Add mean line for regressions including observed nodes only
pl <- pl + geom_abline(slope=mean_slope_obs,
intercept=mean_intercept_obs,
colour = 'red', linetype = line_type_obs)
# Add mean slope and 95% Cred.I (for regressions involving all points)
pl <- pl + ggtitle(parse(text = paste('Slope == {',
scientific_10(mean_slope_all),
'} (',
scientific_10(slope_all_llim),
',',
scientific_10(slope_all_ulim),
')',
sep = ''
)
)
)
pl
