# Copy "rate" list to use as basis for syn. and non-syn. annotation
#S_rates <- time_tree@stats$rate
#N_rates <- time_tree@stats$rate
#for(branch in 1:length(time_tree$annotations)){
for(branch in 1:nrow(time_tree@stats)){
# If using ggtree to read tree
S_count <- time_tree@stats$S[branch]
N_count <- time_tree@stats$N[branch]
branch_time <- time_tree@stats$length[branch]
# Find unconditional ("neutral") counts
#b_u_N <- time_tree@stats$b_u_N[branch]
#b_u_S <- time_tree@stats$b_u_S[branch]
# Divide counts by neutral counts
S_count <- as.numeric(S_count) / as.numeric(b_u_S)
N_count <- as.numeric(N_count) / as.numeric(b_u_N)
# Dividing by the number of sites
# (dividing by b_u should take that into account)
#S_count <- as.numeric(S_count)/nsites
#N_count <- as.numeric(N_count)/nsites
# Dividing by the branch time to get rates:
S_rate <- S_count/as.numeric(branch_time)
N_rate <- N_count/as.numeric(branch_time)
time_tree@stats$S[branch] <- as.character(S_rate)
time_tree@stats$N[branch] <- as.character(N_rate)
time_tree@stats$rate[branch] <- as.character(S_rate + N_rate)
}
S_rates_list <- time_tree@stats[which(names(time_tree@stats) == "S")]
N_rates_list <- time_tree@stats[which(names(time_tree@stats) == "N")]
height_list <- time_tree@stats[which(names(time_tree@stats) == "height")]
total_rates_list <- time_tree@stats[which(names(time_tree@stats) == "rate")]
S_rates <- c()
N_rates <- c()
total_rates <- c()
time_since_infection <- c()
rate <- c()
for(i in 1:nrow(S_rates_list)){
S_rates[i] <- as.numeric(S_rates_list[[1]][i])
N_rates[i] <- as.numeric(N_rates_list[[1]][i])
total_rates[i] <- as.numeric(total_rates_list[[1]][i])
time_since_infection[i] <- max(obs_time_points) - as.numeric(height_list[[1]][i])
}
# Indexing vector for nodes corresponding to observed sequences:
is_obs <- rep(FALSE, length(time_since_infection))
for (time_point in obs_time_points){
is_obs <- is_obs | (round(time_since_infection) == time_point)
}
time_tree <- read.beast(time_tree_path)
subst_tree <- read.beast(subst_tree_path)
#Check that the topologies are identical:
print("Check topologies are identical for both time and distance trees")
nrow(time_tree@phylo$edge) == nrow(subst_tree@phylo$edge)
colSums(time_tree@phylo$edge == subst_tree@phylo$edge) == rep(nrow(time_tree@phylo$edge),2)
#Distance from germline:
dist_to_germline <- dist.nodes(subst_tree@phylo)
print("WARNING: Check that germline is column 1 in phylogenetic distance matrix!")
dist_to_germline <- dist_to_germline[, 1]
# ============ ANNOTATING SYN. AND NONS-SYN RATES =============
# If using ggtree to read tree
# Copy "rate" list to use as basis for syn. and non-syn. annotation
#S_rates <- time_tree@stats$rate
#N_rates <- time_tree@stats$rate
#for(branch in 1:length(time_tree$annotations)){
for(branch in 1:nrow(time_tree@stats)){
# If using ggtree to read tree
S_count <- time_tree@stats$S[branch]
N_count <- time_tree@stats$N[branch]
branch_time <- time_tree@stats$length[branch]
# Find unconditional ("neutral") counts
b_u_N <- time_tree@stats$b_u_N[branch]
b_u_S <- time_tree@stats$b_u_S[branch]
# Divide counts by neutral counts
S_count <- as.numeric(S_count) / as.numeric(b_u_S)
N_count <- as.numeric(N_count) / as.numeric(b_u_N)
# Dividing by the number of sites
# (dividing by b_u should take that into account)
#S_count <- as.numeric(S_count)/nsites
#N_count <- as.numeric(N_count)/nsites
# Dividing by the branch time to get rates:
S_rate <- S_count/as.numeric(branch_time)
N_rate <- N_count/as.numeric(branch_time)
time_tree@stats$S[branch] <- as.character(S_rate)
time_tree@stats$N[branch] <- as.character(N_rate)
time_tree@stats$rate[branch] <- as.character(S_rate + N_rate)
}
S_rates_list <- time_tree@stats[which(names(time_tree@stats) == "S")]
N_rates_list <- time_tree@stats[which(names(time_tree@stats) == "N")]
height_list <- time_tree@stats[which(names(time_tree@stats) == "height")]
total_rates_list <- time_tree@stats[which(names(time_tree@stats) == "rate")]
S_rates <- c()
N_rates <- c()
total_rates <- c()
time_since_infection <- c()
rate <- c()
for(i in 1:nrow(S_rates_list)){
S_rates[i] <- as.numeric(S_rates_list[[1]][i])
N_rates[i] <- as.numeric(N_rates_list[[1]][i])
total_rates[i] <- as.numeric(total_rates_list[[1]][i])
time_since_infection[i] <- max(obs_time_points) - as.numeric(height_list[[1]][i])
}
# Indexing vector for nodes corresponding to observed sequences:
is_obs <- rep(FALSE, length(time_since_infection))
for (time_point in obs_time_points){
is_obs <- is_obs | (round(time_since_infection) == time_point)
}
loess_span <- 3/4
loess_lwd <- 2
loess_col <- "red"
scatter.smooth(total_rates ~ time_since_infection, bty = "l",
xlab = paste("Time since infection (", unit, "s)", sep = ""),
ylab = paste("Total substitution rate (per site per ", unit,")", sep = ""),
span = loess_span,
lpars = list(col = loess_col, lwd = loess_lwd))
plot(total_rates[is_obs]~dist_to_germline[is_obs], bty = "l", xlab = "Evolutionary distance from germline",
ylab = paste("Total substitution rate (per site per ", unit,")", sep = ""))
scatter.smooth(total_rates ~ dist_to_germline, bty = "l",
xlab = "Evolutionary distance from germline",
ylab = paste("Total substitution rate (per site per ", unit,")", sep = ""),
span = loess_span,
lpars = list(col = loess_col, lwd = loess_lwd))
plot(total_rates~dist_to_germline, bty = "l", xlab = "Evolutionary distance from germline",
ylab = paste("Total substitution rate (per site per ", unit,")", sep = ""))
time_tree <- read.beast(time_tree_path)
subst_tree <- read.beast(subst_tree_path)
#Check that the topologies are identical:
print("Check topologies are identical for both time and distance trees")
nrow(time_tree@phylo$edge) == nrow(subst_tree@phylo$edge)
colSums(time_tree@phylo$edge == subst_tree@phylo$edge) == rep(nrow(time_tree@phylo$edge),2)
#Distance from germline:
dist_to_germline <- dist.nodes(subst_tree@phylo)
print("WARNING: Check that germline is column 1 in phylogenetic distance matrix!")
dist_to_germline <- dist_to_germline[, 1]
# ============ ANNOTATING SYN. AND NONS-SYN RATES =============
# If using ggtree to read tree
# Copy "rate" list to use as basis for syn. and non-syn. annotation
#S_rates <- time_tree@stats$rate
#N_rates <- time_tree@stats$rate
#for(branch in 1:length(time_tree$annotations)){
for(branch in 1:nrow(time_tree@stats)){
# If using ggtree to read tree
S_count <- time_tree@stats$S[branch]
N_count <- time_tree@stats$N[branch]
branch_time <- time_tree@stats$length[branch]
# Find unconditional ("neutral") counts
#b_u_N <- time_tree@stats$b_u_N[branch]
#b_u_S <- time_tree@stats$b_u_S[branch]
# Divide counts by neutral counts
#S_count <- as.numeric(S_count) / as.numeric(b_u_S)
#N_count <- as.numeric(N_count) / as.numeric(b_u_N)
# Dividing by the number of sites
# (dividing by b_u should take that into account)
S_count <- as.numeric(S_count)/nsites
N_count <- as.numeric(N_count)/nsites
# Dividing by the branch time to get rates:
S_rate <- S_count/as.numeric(branch_time)
N_rate <- N_count/as.numeric(branch_time)
time_tree@stats$S[branch] <- as.character(S_rate)
time_tree@stats$N[branch] <- as.character(N_rate)
time_tree@stats$rate[branch] <- as.character(S_rate + N_rate)
}
S_rates_list <- time_tree@stats[which(names(time_tree@stats) == "S")]
N_rates_list <- time_tree@stats[which(names(time_tree@stats) == "N")]
height_list <- time_tree@stats[which(names(time_tree@stats) == "height")]
total_rates_list <- time_tree@stats[which(names(time_tree@stats) == "rate")]
S_rates <- c()
N_rates <- c()
total_rates <- c()
time_since_infection <- c()
rate <- c()
for(i in 1:nrow(S_rates_list)){
S_rates[i] <- as.numeric(S_rates_list[[1]][i])
N_rates[i] <- as.numeric(N_rates_list[[1]][i])
total_rates[i] <- as.numeric(total_rates_list[[1]][i])
time_since_infection[i] <- max(obs_time_points) - as.numeric(height_list[[1]][i])
}
# Indexing vector for nodes corresponding to observed sequences:
is_obs <- rep(FALSE, length(time_since_infection))
for (time_point in obs_time_points){
is_obs <- is_obs | (round(time_since_infection) == time_point)
}
plot(total_rates~dist_to_germline, bty = "l", xlab = "Evolutionary distance from germline",
ylab = paste("Total substitution rate (per site per ", unit,")", sep = ""))
scatter.smooth(total_rates ~ dist_to_germline, bty = "l",
xlab = "Evolutionary distance from germline",
ylab = paste("Total substitution rate (per site per ", unit,")", sep = ""),
span = loess_span,
lpars = list(col = loess_col, lwd = loess_lwd))
scatter.smooth(total_rates ~ dist_to_germline, bty = "l",
xlab = "Evolutionary distance from germline",
ylab = paste("Total substitution rate (per site per ", unit,")", sep = ""),
span = loess_span,
lpars = list(col = loess_col, lwd = 2/3))
scatter.smooth(total_rates ~ dist_to_germline, bty = "l",
xlab = "Evolutionary distance from germline",
ylab = paste("Total substitution rate (per site per ", unit,")", sep = ""),
span = 2/3,
lpars = list(col = loess_col, lwd = loess_lwd))
scatter.smooth(total_rates ~ dist_to_germline, bty = "l",
xlab = "Evolutionary distance from germline",
ylab = paste("Total substitution rate (per site per ", unit,")", sep = ""),
span = loess_span,
lpars = list(col = loess_col, lwd = loess_lwd))
setwd("/Volumes/cobey/mvieira/evolution_evolvability/Analyses/3_Mutability")
require('ggplot2')
require('reshape')
require('gridExtra')
require('ape')
require('grid')
require('OutbreakTools')
require('ggtree')
clone <- "CH103"
coalescent_prior <- "constant"
run_id <- "b"
nsites_list <- list(CH103 = 321, VRC26 = 489, VRC01_13 = 351) #Number of sites in the alignment
obs_time_point_list <- list(CH103 = c(53, 92, 144),
VRC26 = c(38,48,59, 119, 176,206),
VRC01_13 = c(208, 136, 237, 60,
145, 221, 231, 214,
136,202,196)
)
vs_time_plot_path <- paste("../../Figures/Mutability_vs_time/",
clone, "_", coalescent_prior, "/",
clone, "_", substr(coalescent_prior,1,3), "_run1", run_id, "/",
sep = "")
vs_distance_plot_path <- paste("../../Figures/Mutability_vs_distance/",
clone, "_", coalescent_prior, "/",
clone, "_", substr(coalescent_prior,1,3), "_run1", run_id, "/",
sep = "")
subst_tree_path <- paste("../../Results/2_Phylogenetics/BEAST/",
clone, "_", coalescent_prior, "/",
clone, "_", substr(coalescent_prior,1,3), "_run1", run_id,
"/MCC_subst.tree",
sep = "")
subst_tree <- read.nexus(subst_tree_path)
distances <- cophenetic.phylo(subst_tree)
distance_to_germline <- distances[,colnames(distances) == "GERMLINE_00"]
distance_to_germline <- data.frame(distance_to_germline)
distance_to_germline <- data.frame (as.factor(row.names(distance_to_germline)),
distance_to_germline)
names(distance_to_germline)[1] <- "seq_id"
pmatch("VRC01",clone)
if(pmatch("VRC01",clone) == 1){
mutability_path <- paste("../../Results/3_Mutability/",
"VRC01", "_mutability.csv",
sep = "")
}else{
mutability_path <- paste("../../Results/3_Mutability/",
clone, "_mutability.csv",
sep = "")
}
if(pmatch("VRC01",clone) == 1){
mutability_path <- paste("../../Results/3_Mutability/",
"VRC01", "_mutability.csv",
sep = "")
}else{
mutability_path <- paste("../../Results/3_Mutability/",
clone, "_mutability.csv",
sep = "")
}
pmatch("VRC01",clone) == 1
is.na(pmatch("VRC01",clone)) == F
if(is.na(pmatch("VRC01",clone)) == F){
mutability_path <- paste("../../Results/3_Mutability/",
"VRC01", "_mutability.csv",
sep = "")
}else{
mutability_path <- paste("../../Results/3_Mutability/",
clone, "_mutability.csv",
sep = "")
}
setwd("/Volumes/cobey/mvieira/evolution_evolvability/Analyses/3_Mutability")
data(diamonds)
p.dia <- ggplot(data = diamonds, mapping = aes(x = clarity))
p <- p.dia + layer(geom = "bar", mapping = aes(fill = cut))
p
data(diamonds)
p.dia <- ggplot(data = diamonds, mapping = aes(x = clarity))
p <- p.dia + layer(geom = "bar", mapping = aes(fill = cut))
p
p <- p.dia + layer(geom = "bar", mapping = aes(fill = cut))
p
p.dia
p.dia
library(ggplot2)
p.dia + layer(geom = "bar", mapping = aes(fill = cut))
p.dia + layer(geom = "bar", mapping = aes(fill = cut))
data <- data.frame(x = 1:10, y = 1:10)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point()
o
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw()
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(axis.line = element_line(size = 2))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(axis.line = element_line(size = 20))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(axis.line = element_line(size = 20))+
theme(panel.background = element_rect(size = 2))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(axis.line = element_line(size = 20))+
theme(panel.background = element_rect(colour="pink"))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(axis.line = element_line(size = 20))+
theme(panel.background = element_rect(colour="pink", linetype = "dashed"))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.background = element_rect(colour="pink", linetype = "dashed"))
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.background = element_rect(colour="pink", linetype = "dashed"))
p
z <- ggplot(mtcars, aes(wt, mpg)) +
geom_point(aes(colour = factor(cyl)))
z
z + theme(panel.border = element_rect(linetype = "dashed", colour = "black"))
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour="pink", linetype = "dashed"))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed"))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 10))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(vjust = -0.5))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(vjust = -1))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(vjust = -1, size = 2))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(vjust = -1, size = 1.5))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(vjust = -1, size = 1.2))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(vjust = -1))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(vjust = 1))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(vjust = 2))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(margin = 2))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(margin = 1))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(colour = "red"))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(colour = "red",lineheight = 2))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(colour = "red",lineheight = 10))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(colour = "red",vjust = 0)
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(colour = "red",vjust = 0)
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(colour = "red",vjust = 0)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(colour = "red",vjust = 0))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.x = element_text(colour = "red",vjust = 1))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.y = element_text(colour = "red",vjust = 2))
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.y = element_text(colour = "red",vjust = 0.5))
p
ggplot(mpg, aes(cty, hwy)) + geom_point()+
theme(axis.title.y=element_text(margin=margin(0,20,0,0)))
ggplot(mpg, aes(cty, hwy)) + geom_point()+
theme(axis.title.y=element_text(margin=margin(0,49,0,0)))
ggplot(mpg, aes(cty, hwy)) + geom_point()+
theme(axis.title.y=element_text(margin=margin(0,0,0,0)))
ggplot(mpg, aes(cty, hwy)) + geom_point()+
theme(axis.title.y=element_text(margin=margin(0,20,0,0)))
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.y = element_text(colour = "red", margin))+
annotate("text", x = 20, label = "lalala")
p
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point() +
theme_bw() +
theme(panel.border = element_rect(colour = "black", linetype = "dashed", size = 2)) +
theme(axis.title.y = element_text(colour = "red", margin))+
annotate("text", x = 20, y = 20 label = "lalala")
p
x <- 1.124192875e-10
x
round(x, 5)
round(x, 10)
?round
signif(x, 4)
signif(x, 3)
FR <- 33 + 51 + 114
FR
CDR <- 24 + 21 + 45
CDR
90 + 189
90 + 198
90/321
1 - 90/321
setwd("/Volumes/cobey/mvieira/evolution_evolvability/Analyses/3_Mutability")
