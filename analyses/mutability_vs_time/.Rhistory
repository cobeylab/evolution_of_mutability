theme(axis.text=element_text(size=x_axis_text_size_subplot),
axis.title=element_text(size=axis_title_size_subplot),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
plot.title = element_text(size=2)
)
# Standalone version of subplot
subpl_standalone <- subpl + xlab('Relative frequency of losses') +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(0.15, "cm"),
plot.margin = unit(c(1, 1, 0.2, 0.2),"cm"),
title = element_text(size = title_size),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black")
)
# Subplot partitioned by internal and terminal branches
subpl_internal_vs_terminal <- base_subpl +
geom_area(data = dat_terminal, mapping = aes(x = ifelse(x>fraction_llim_terminal & x< fraction_ulim_terminal , x, 0),y),
fill = "royalblue1",alpha = 0.5 )+
geom_area(data = dat_internal, mapping = aes(x = ifelse(x>fraction_llim_internal & x< fraction_ulim_internal, x, 0),y),
fill = "grey40",alpha = 0.5) +
geom_line(data = dat_terminal, mapping = aes(x = x, y = y),size =1, colour='royalblue1') +
geom_line(data = dat_internal, mapping = aes(x = x, y = y),size =1,colour='grey40') +
scale_y_continuous(expand = c(0,0.01), limits = c(0,1.1*max(c(max(dat_internal$y), max(dat_terminal$y))))) +
geom_vline(xintercept=mean(fraction_negative_terminal,na.rm=T), colour = 'royalblue1') +
geom_vline(xintercept=mean(fraction_negative_internal,na.rm=T), colour = 'grey40') +
xlim(c(0,1)) +
geom_vline(xintercept = 0.5, linetype=2) +
ylab('Density') +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks = element_line(size = 1.5),
axis.ticks.length = unit(0.5, "cm"),
plot.margin = unit(c(1, 1, 0.2, 0.2),"cm"),
title = element_text(size = title_size),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black")
)
return(list('main_plot'= main_pl,
'sub_plot' = subpl,
'sub_plot_standalone' = subpl_standalone,
'sub_plot_by_branch_position' = subpl_internal_vs_terminal,
'summary'= indicator,
'summary_terminal' = indicator_terminal,
'summary_internal' = indicator_internal,
'mean_contrast' = mean(contrast_means, na.rm = T),
'mean_contrast_HPD_llim' = means_llim,
'mean_contrast_HPD_ulim' = means_ulim,
'mean_contrast_terminal' = mean(contrast_means_terminal, na.rm = T),
'mean_contrast_terminal_HPD_llim' = means_terminal_llim,
'mean_contrast_terminal_HPD_ulim' = means_terminal_ulim,
'mean_contrast_internal' = mean(contrast_means_internal, na.rm = T),
'mean_contrast_internal_HPD_llim' = means_internal_llim,
'mean_contrast_internal_HPD_ulim' = means_internal_ulim,
'mean_fraction_negative' = mean(fraction_negative,na.rm = T),
'fraction_negative_HPD_llim' = fraction_llim,
'fraction_negative_HPD_ulim' = fraction_ulim,
'mean_fraction_negative_terminal' = mean(fraction_negative_terminal,na.rm = T),
'fraction_negative_terminal_HPD_llim' = fraction_llim_terminal,
'fraction_negative_terminal_HPD_ulim' = fraction_ulim_terminal,
'mean_fraction_negative_internal' = mean(fraction_negative_internal,na.rm = T),
'fraction_negative_internal_HPD_llim' = fraction_llim_internal,
'fraction_negative_internal_HPD_ulim' = fraction_ulim_internal
)
)
}
# Master function for mutability contrast distributions
master_plot_mutability <- function(pars){
do.call(base_plot_mutability, pars)
}
pdf_path <- paste(plot_directory, chain_id,'_', metric,'_', region,'_contrasts_distribution.pdf', sep = '')
pdf(pdf_path, width = 3.43, height = 3.43)
plot(analysis$main_plot)
plot(analysis$sub_plot, vp = vp)
dev.off()
pdf_path <- paste(plot_directory, chain_id,'_', metric,'_', region,'_contrasts_distribution.pdf', sep = '')
pdf(pdf_path, width = 10, height = 10)
plot(analysis$main_plot)
plot(analysis$sub_plot, vp = vp)
dev.off()
{
title_size <- 20
axis_title_size <- 30
y_axis_text_size <- 25
x_axis_text_size <- 25
axis_title_size_subplot <- 20
y_axis_text_size_subplot <- 15
x_axis_text_size_subplot <- 15
ylab_distance <- 20
xlab_distance <- 30
plot_margins <- c(0.3, 1, 0.3, 2)
}
?tiff
base_analysis_rate <- function(rate,normalized=F){
xlabel <- switch(rate,
total_rate = "Change in the total rate",
total_rate_RC = "Change in the total rate (RC)",
S_rate = "Change in the synonymous rate",
N_rate = "Change in the non-synonymous rate"
)
if(normalized == T){
xlabel <- paste(xlabel, ' (normalized)', sep='')
}
# Finding maximum absolute contrast
max_abs_contrast <- max(abs(rate_dataframe[mutability_dataframe$tree %in% tree_sample,
paste(rate, '_contrast',sep='')]),na.rm=T)
# Base plot...
base_pl <- ggplot() +
theme_classic()
main_pl <- base_pl +  xlab(xlabel) + ylab('Frequency') +
scale_y_continuous(expand = c(0,0.01)) +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(0.15, "cm"),
plot.margin = unit(c(1, 1, 0.2, 0.2),"cm"),
title = element_text(size = title_size),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
legend.position="none"
)
fraction_negative <- c()
contrast_means <- c()
# For each tree (from all, not just sample), record fraction of changes that are negative (not counting 0s)
# Add log(density+1) plot for tree to main plot
for(tree in unique(rate_dataframe$tree)[1:1000]){
#print(tree)
if(normalized == T){
x <- rate_dataframe[rate_dataframe$tree == tree, paste(rate,'_contrast', sep='')]
x <- x / rate_dataframe[rate_dataframe$tree == tree, paste(rate,'_to_child',sep='')]
}else{
x <- rate_dataframe[rate_dataframe$tree == tree,paste(rate,'_contrast', sep='')]
}
contrast_means <- c(contrast_means, mean(x))
# If tree is in tree_sample, plot histogram
if(tree %in% tree_sample){
main_dat <- data.frame(x)
main_pl <- main_pl + geom_histogram(data=main_dat,aes(x=x), bins = 20,
fill='white',colour='black',alpha=0)
main_pl <- main_pl + geom_vline(xintercept = mean(x),colour='red',alpha=0.1)
}
x <- x[x!=0]
# Check if there was at least one change (i.e. x is not all zeros)
if(length(x)>0){
fraction_negative <-c(fraction_negative, sum(x<0)/length(x))
}else{
fraction_negative <- c(fraction_negative,NA)
}
}
main_pl <- main_pl + scale_x_continuous(limits = c(-1.1*max_abs_contrast,1.1*max_abs_contrast)) +
scale_y_log10() +
annotation_logticks(sides = "l", size = 2)
# Compute average of mean contrasts and HPD
means_dat <- data.frame(contrast_means)
means_HPD_limits <- HPDinterval(as.mcmc(means_dat$contrast_means), 0.95)
means_llim <- means_HPD_limits[1]
means_ulim <- means_HPD_limits[2]
# Generate inset plot with distribution of fraction of neg. changes ignoring 0s
sub_dat <- data.frame(fraction_negative)
fraction_HPD_limits <- HPDinterval(as.mcmc(sub_dat$fraction_negative), 0.95)
fraction_llim <- fraction_HPD_limits[1]
fraction_ulim <- fraction_HPD_limits[2]
# Summary: -1 if neg. changes predominate, 1 if positive changes predominate, 0 if none
if(fraction_llim>0.5){
indicator <- -1
}else{
if(fraction_ulim<0.5){
indicator <- 1
}else{
indicator <- 0
}
}
sub_dat <- with(density(sub_dat$fraction_negative,na.rm=T), data.frame(x, y))
limit_factor <- max(abs(0.5 - max(sub_dat$x)),
abs(0.5 - min(sub_dat$x)))
subpl <- base_pl +
theme(
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
axis.text=element_text(size=x_axis_text_size_subplot),
axis.title=element_text(size=x_axis_text_size_subplot)
) +
geom_line(data = sub_dat, mapping = aes(x = x, y = y),size =1) +
geom_area(data = sub_dat, mapping = aes(x = ifelse(x>fraction_llim & x< fraction_ulim , x, 0),y), fill = "grey") +
scale_y_continuous(expand = c(0,0.002), limits = c(0,1.1*max(sub_dat$y))) +
xlim(c( max(0,0.9*(0.5-limit_factor)), min(1,1.1*(0.5+limit_factor)))) +
geom_vline(xintercept=mean(fraction_negative,na.rm=T), colour = 'red') +
ylab('Density') + xlab('Fraction of losses') +
geom_vline(xintercept = 0.5, linetype=2)
# Standalone version of the subplot
subpl_standalone <- subpl + xlab('Relative frequency of losses') +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(0.15, "cm"),
plot.margin = unit(c(1, 1, 0.2, 0.2),"cm"),
title = element_text(size = title_size),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
legend.position="none"
)
return(list('main_plot'= main_pl,
'sub_plot' = subpl,
'sub_plot_standalone' = subpl_standalone,
'summary'=indicator,
'mean_contrast' = mean(contrast_means, na.rm = T),
'mean_contrast_HPD_llim' = means_llim,
'mean_contrast_HPD_ulim' = means_ulim,
'mean_fraction_negative' = mean(fraction_negative,na.rm = T),
'fraction_negative_HPD_llim' = fraction_llim,
'fraction_negative_HPD_ulim' = fraction_ulim
)
)
}
# Master function for rate contrast distributions
master_plot_rate <- function(pars){
do.call(base_plot_rate, pars)
}
# Base function for mutability contrast distributions
base_analysis_mutability <- function(metric,region,normalized=F){
xlabel <- switch(metric,
S5F = 'Change in S5F mutability',
X7M = 'Change in 7-mer mutability',
HS = 'Change in the number of hotspots',
CS = 'Change in the number of coldspots',
OHS = 'Change in the number of overlapping hotspots'
)
if(region != 'WS'){
xlabel <- paste(xlabel,' (',region,')',sep='')
}
if(normalized == T){
xlabel <- paste(xlabel, ' (normalized)', sep='')
}
# Base plot...
base_pl <- ggplot() +
scale_y_continuous(expand = c(0,0)) +
theme_classic() +
ylab('Frequency')
# Determine maximum absolute contrast (to determine x-axis limits)
max_abs_contrast <- max(abs(mutability_dataframe[mutability_dataframe$tree %in% tree_sample,
paste(metric, '_', region, '_contrast',sep='')]))
main_pl <- base_pl + xlab(xlabel) +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(0.15, "cm"),
plot.margin = unit(c(1, 1, 0.2, 0.2),"cm"),
title = element_text(size = title_size),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
legend.position="none"
) +
scale_x_continuous(limits = c(-1.1*max_abs_contrast,1.1*max_abs_contrast))
# plot histograms
for(tree in tree_sample){
if(normalized == T){
x <- mutability_dataframe[mutability_dataframe$tree == tree,
paste(metric, '_', region, '_contrast',sep='')]
x <- x / mutability_dataframe[mutability_dataframe$tree == tree,
paste(metric, '_', region, '_parent',sep='')]
}else{
x <- mutability_dataframe[mutability_dataframe$tree == tree,
paste(metric, '_', region, '_contrast',sep='')]
}
temp_dataframe <- data.frame(x)
# If contrasts are discrete (hotspots, coldspots, overlapping HS), set bin width to 1
if(metric %in% c('HS','CS','OHS')){
main_pl <- main_pl + geom_histogram(data=temp_dataframe,aes(x=x), fill = 'white',
colour = 'black',alpha = 0.3, binwidth=1)
}else{
main_pl <- main_pl + geom_histogram(data=temp_dataframe,aes(x=x), fill = 'white',
colour = 'black',alpha = 0.3)
}
}
# plot means on top of histograms as vertical red lines
# Get distribuiton of the fraction of negative changes
fraction_negative <- c()
fraction_negative_internal <- c()
fraction_negative_terminal <- c()
contrast_means <- c()
contrast_means_internal <- c()
contrast_means_terminal <- c()
for(tree in unique(mutability_dataframe$tree)[1:1000]){
if(normalized == T){
x <- mutability_dataframe[mutability_dataframe$tree == tree,
paste(metric, '_', region, '_contrast',sep='')]
x <- x / mutability_dataframe[mutability_dataframe$tree == tree,
paste(metric, '_', region, '_parent',sep='')]
}else{
x <- mutability_dataframe[mutability_dataframe$tree == tree,
paste(metric, '_', region, '_contrast',sep='')]
}
branch_is_terminal <- mutability_dataframe[mutability_dataframe$tree == tree,
'child_is_tip']
branch_is_terminal <- as.logical(branch_is_terminal)
contrast_means <- c(contrast_means, mean(x))
contrast_means_terminal <- c(contrast_means_terminal, mean(x[branch_is_terminal]))
contrast_means_internal <- c(contrast_means_internal, mean(x[branch_is_terminal == F]))
if(tree %in% tree_sample){
mean_value <- mean(x)
main_pl <- main_pl + geom_vline(xintercept = mean_value, colour = 'red',
alpha = 0.1, size = 0.2)
}
# Get overall fraction of negative changes (disregarding 0s)
if(length(x[x!=0]) > 0){
fraction_negative <- c(fraction_negative,sum(x[x!=0]<0)/length(x[x!=0]))
}else{
fraction_negative <- c(fraction_negative, NA)
}
# Get fraction of negative changes in terminal branches
if(length(x[branch_is_terminal][x[branch_is_terminal]!=0]) > 0){
fraction_negative_terminal <- c(fraction_negative_terminal,
sum(x[branch_is_terminal][x[branch_is_terminal]!=0]<0)/length(x[branch_is_terminal][x[branch_is_terminal]!=0]))
}else{
fraction_negative_terminal <- c(fraction_negative_terminal, NA)
}
# Get fraction of negative changes in internal branches
if(length(x[branch_is_terminal == F][x[branch_is_terminal == F]!=0]) > 0){
fraction_negative_internal <- c(fraction_negative_internal,
sum(x[branch_is_terminal == F][x[branch_is_terminal == F]!=0]<0)/length(x[branch_is_terminal == F][x[branch_is_terminal == F]!=0]))
}else{
fraction_negative_internal <- c(fraction_negative_internal, NA)
}
}
# Get average mean contrast (and HPD)
means_dat <- data.frame(contrast_means)
means_HPD_limits <- HPDinterval(as.mcmc(means_dat$contrast_means), 0.95)
means_llim <- means_HPD_limits[1]
means_ulim <- means_HPD_limits[2]
means_terminal_dat <- data.frame(contrast_means_terminal)
means_terminal_HPD_limits <- HPDinterval(as.mcmc(means_terminal_dat$contrast_means_terminal), 0.95)
means_terminal_llim <- means_terminal_HPD_limits[1]
means_terminal_ulim <- means_terminal_HPD_limits[2]
means_internal_dat <- data.frame(contrast_means_internal)
means_internal_HPD_limits <- HPDinterval(as.mcmc(means_internal_dat$contrast_means_internal), 0.95)
means_internal_llim <- means_internal_HPD_limits[1]
means_internal_ulim <- means_internal_HPD_limits[2]
if(sum(is.na(fraction_negative)) < length(fraction_negative)){
temp_dataframe <- data.frame(fraction_negative)
fraction_HPD_limits <- HPDinterval(as.mcmc(temp_dataframe[, 1]), 0.95)
fraction_llim <- fraction_HPD_limits[1]
fraction_ulim <- fraction_HPD_limits[2]
}else{
fraction_llim <- ''
fraction_ulim <- ''
}
temp_dataframe_terminal <- data.frame(fraction_negative_terminal)
fraction_HPD_limits_terminal <- HPDinterval(as.mcmc(temp_dataframe_terminal[, 1]), 0.95)
fraction_llim_terminal <- fraction_HPD_limits_terminal[1]
fraction_ulim_terminal <- fraction_HPD_limits_terminal[2]
temp_dataframe_internal <- data.frame(fraction_negative_internal)
fraction_HPD_limits_internal <- HPDinterval(as.mcmc(temp_dataframe_internal[, 1]), 0.95)
fraction_llim_internal <- fraction_HPD_limits_internal[1]
fraction_ulim_internal <- fraction_HPD_limits_internal[2]
# Summary: -1 if neg. changes predominate, 1 if positive changes predominate, 0 if none
if(fraction_llim>0.5){
indicator <- -1
}else{
if(fraction_ulim<0.5){
indicator <- 1
}else{
indicator <- 0
}
}
if(fraction_llim_terminal>0.5){
indicator_terminal <- -1
}else{
if(fraction_ulim_terminal<0.5){
indicator_terminal <- 1
}else{
indicator_terminal <- 0
}
}
if(fraction_llim_internal>0.5){
indicator_internal <- -1
}else{
if(fraction_ulim_internal<0.5){
indicator_internal <- 1
}else{
indicator_internal <- 0
}
}
# Add inset plot showing distribuiton of changes that are negative (disregarding 0s):
dat <- with(density(temp_dataframe$fraction_negative,na.rm=T), data.frame(x, y))
dat_terminal <- with(density(temp_dataframe_terminal$fraction_negative_terminal,na.rm=T), data.frame(x, y))
dat_internal <- with(density(temp_dataframe_internal$fraction_negative_internal,na.rm=T), data.frame(x, y))
base_subpl <- base_pl + xlab('Fraction of losses')
limit_factor <- max(abs(0.5 - max(dat$x)),
abs(0.5 - min(dat$x)))
subpl <- base_subpl +
geom_area(data = dat, mapping = aes(x = ifelse(x>fraction_llim & x< fraction_ulim , x, 0),y), fill = "grey",alpha = 0.5) +
geom_line(data = dat, mapping = aes(x = x, y = y),size =1) +
scale_y_continuous(expand = c(0,0.01), limits = c(0,1.1*max(dat$y))) +
geom_vline(xintercept=mean(fraction_negative,na.rm=T), size = 1,colour='red') +
xlim(c(0,1)) +
geom_vline(xintercept = 0.5, linetype=2) +
ylab('Density') +
theme(axis.text=element_text(size=x_axis_text_size_subplot),
axis.title=element_text(size=axis_title_size_subplot),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black"),
plot.title = element_text(size=2)
)
# Standalone version of subplot
subpl_standalone <- subpl + xlab('Relative frequency of losses') +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks = element_line(size = 0.5),
axis.ticks.length = unit(0.15, "cm"),
plot.margin = unit(c(1, 1, 0.2, 0.2),"cm"),
title = element_text(size = title_size),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black")
)
# Subplot partitioned by internal and terminal branches
subpl_internal_vs_terminal <- base_subpl +
geom_area(data = dat_terminal, mapping = aes(x = ifelse(x>fraction_llim_terminal & x< fraction_ulim_terminal , x, 0),y),
fill = "royalblue1",alpha = 0.5 )+
geom_area(data = dat_internal, mapping = aes(x = ifelse(x>fraction_llim_internal & x< fraction_ulim_internal, x, 0),y),
fill = "grey40",alpha = 0.5) +
geom_line(data = dat_terminal, mapping = aes(x = x, y = y),size =1, colour='royalblue1') +
geom_line(data = dat_internal, mapping = aes(x = x, y = y),size =1,colour='grey40') +
scale_y_continuous(expand = c(0,0.01), limits = c(0,1.1*max(c(max(dat_internal$y), max(dat_terminal$y))))) +
geom_vline(xintercept=mean(fraction_negative_terminal,na.rm=T), colour = 'royalblue1') +
geom_vline(xintercept=mean(fraction_negative_internal,na.rm=T), colour = 'grey40') +
xlim(c(0,1)) +
geom_vline(xintercept = 0.5, linetype=2) +
ylab('Density') +
theme(axis.title.y = element_text(size = axis_title_size,
margin = margin(0,ylab_distance,0,0)),
axis.title.x = element_text(size = axis_title_size,
margin = margin(xlab_distance,0,0,0)),
axis.text.x = element_text(size = x_axis_text_size),
axis.text.y = element_text(size = y_axis_text_size),
axis.ticks = element_line(size = 1.5),
axis.ticks.length = unit(0.5, "cm"),
plot.margin = unit(c(1, 1, 0.2, 0.2),"cm"),
title = element_text(size = title_size),
axis.line.x = element_line(colour="black"),
axis.line.y = element_line(colour="black")
)
return(list('main_plot'= main_pl,
'sub_plot' = subpl,
'sub_plot_standalone' = subpl_standalone,
'sub_plot_by_branch_position' = subpl_internal_vs_terminal,
'summary'= indicator,
'summary_terminal' = indicator_terminal,
'summary_internal' = indicator_internal,
'mean_contrast' = mean(contrast_means, na.rm = T),
'mean_contrast_HPD_llim' = means_llim,
'mean_contrast_HPD_ulim' = means_ulim,
'mean_contrast_terminal' = mean(contrast_means_terminal, na.rm = T),
'mean_contrast_terminal_HPD_llim' = means_terminal_llim,
'mean_contrast_terminal_HPD_ulim' = means_terminal_ulim,
'mean_contrast_internal' = mean(contrast_means_internal, na.rm = T),
'mean_contrast_internal_HPD_llim' = means_internal_llim,
'mean_contrast_internal_HPD_ulim' = means_internal_ulim,
'mean_fraction_negative' = mean(fraction_negative,na.rm = T),
'fraction_negative_HPD_llim' = fraction_llim,
'fraction_negative_HPD_ulim' = fraction_ulim,
'mean_fraction_negative_terminal' = mean(fraction_negative_terminal,na.rm = T),
'fraction_negative_terminal_HPD_llim' = fraction_llim_terminal,
'fraction_negative_terminal_HPD_ulim' = fraction_ulim_terminal,
'mean_fraction_negative_internal' = mean(fraction_negative_internal,na.rm = T),
'fraction_negative_internal_HPD_llim' = fraction_llim_internal,
'fraction_negative_internal_HPD_ulim' = fraction_ulim_internal
)
)
}
# Master function for mutability contrast distributions
master_plot_mutability <- function(pars){
do.call(base_plot_mutability, pars)
}
png_path <- paste(plot_directory, chain_id,'_', metric,'_', region,'_contrasts_distribution.png', sep = '')
png(png_path, width = 3.43, height = 3.43)
plot(analysis$main_plot)
plot(analysis$sub_plot, vp = vp)
dev.off()
vp <- viewport(width = 0.35, height = 0.3, x = 0.15,
y = unit(33, "lines"), just = c("left",
"bottom"))
pdf_path <- paste(plot_directory, chain_id,'_', metric,'_', region,'_contrasts_distribution.pdf', sep = '')
pdf(pdf_path, width = 10, height = 10)
plot(analysis$main_plot)
plot(analysis$sub_plot, vp = vp)
dev.off()
